@article{Aceto2012,
abstract = {Despite its importance for operating Cloud systems, Cloud monitoring has received limited attention from the research community. In this position paper, we provide an analysis of Cloud monitoring. More precisely, we discuss the main motivations, basic concepts and definitions, and point out open research issues and future directions for Cloud monitoring.},
annote = {},
author = {Aceto, Giuseppe and Botta, Alessio and {De Donato}, Walter and Pescape, Antonio},
doi = {10.1109/CloudNet.2012.6483656},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Aceto et al. - Unknown - Cloud Monitoring definitions, issues and future directions.pdf:pdf},
isbn = {9781467327985},
journal = {2012 1st IEEE International Conference on Cloud Networking, CLOUDNET 2012 - Proceedings},
keywords = {Cloud Monitoring Metrics,Cloud Monitoring and Measurements,Cloud Resource Monitoring,SLA Monitoring},
pages = {63--67},
title = {{Cloud monitoring: Definitions, issues and future directions}},
url = {http://wpage.unina.it/giuseppe.aceto/pub/cloudnet{\_}2012.pdf},
year = {2012}
}
@misc{Aceto2013,
abstract = {Nowadays, Cloud Computing is widely used to deliver services over the Internet for both technical and economical reasons. The number of Cloud-based services has increased rapidly and strongly in the last years, and so is increased the complexity of the infrastructures behind these services. To properly operate and manage such complex infrastructures effective and efficient monitoring is constantly needed. Many works in literature have surveyed Cloud properties, features, underlying technologies (e.g. virtualization), security and privacy. However, to the best of our knowledge, these surveys lack a detailed analysis of monitoring for the Cloud. To fill this gap, in this paper we provide a survey on Cloud monitoring. We start analyzing motivations for Cloud monitoring, providing also definitions and background for the following contributions. Then, we carefully analyze and discuss the properties of a monitoring system for the Cloud, the issues arising from such properties and how such issues have been tackled in literature. We also describe current platforms, both commercial and open source, and services for Cloud monitoring, underlining how they relate with the properties and issues identified before. Finally, we identify open issues, main challenges and future directions in the field of Cloud monitoring. {\textcopyright} 2013 Elsevier B.V. All rights reserved.},
author = {Aceto, Giuseppe and Botta, Alessio and {De Donato}, Walter and Pescap{\`{e}}, Antonio},
booktitle = {Computer Networks},
doi = {10.1016/j.comnet.2013.04.001},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Aceto et al. - 2013 - Cloud monitoring A survey.pdf:pdf},
isbn = {1389-1286},
issn = {13891286},
keywords = {Cloud measurements,Cloud monitoring,Cloud monitoring metrics,Cloud monitoring platforms,Cloud resource monitoring,SLA monitoring},
number = {9},
pages = {2093--2115},
pmid = {7310966},
title = {{Cloud monitoring: A survey}},
volume = {57},
year = {2013}
}
@inproceedings{Ahmad2016,
abstract = {Software companies are increasingly moving to use Kanban after Scrum since Kanban claimed to offer improved project visibility, software quality, team motivation, communication and collaboration. However, empirical studies are needed to verify these effects and companies' real motivation for the transition. In particular, underlying reasons leading software companies to start using Kanban in software maintenance must be understood. A multiple-case study was conducted to investigate why two experienced Scrum maintenance teams transitioned to Kanban. We conducted 17 semi-structured interviews with two different teams from two large Finnish software companies. Thematic analysis was applied to identify the most common challenges in Scrum and their solutions in Kanban. The results showed that Scrum maintenance teams faced challenges, such as lack of work visibility, task prioritisation, communication and collaboration, over commitment of sprints, work synchronisation and changing people. We discuss how maintenance teams mitigated these challenges with Kanban and present the lessons learned.},
annote = {Draft paper, should try to find the actual one},
author = {Ahmad, Muhammad Ovais and Kuvaja, Pasi and Oivo, Markku and Markkula, Jouni},
booktitle = {Proceedings of the 49th Annual Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.2016.670},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/ahmad2016.pdf:pdf},
isbn = {9780769556703},
issn = {15301605},
keywords = {Agile,Kanban,Lean,Scrum,Software maintenance},
pages = {5427--5436},
pmid = {67195556},
publisher = {IEEE},
title = {{Transition of software maintenance teams from scrum to Kanban}},
volume = {March},
year = {2016}
}
@inproceedings{Ahmad2013,
abstract = {Using of Kanban in software development is an emerging topic. This systematic literature review was conducted in order to analyze the current trend of Kanban usage in software development and to identify the obtained benefits and involved challenges. The search strategy resulted in 492 papers, of which 19 were identified as primary studies relevant to our research. The main reported benefits of using the Kanban method were improved lead time to deliver software, improved quality of software, improved communication and coordination, increased consistency of delivery, and decreased customer reported defects. The reported challenges included lack of knowledge and specialized training as well as various organizational issues. Additionally, suggested practices were extracted from the primary studies and summarized for guiding the practitioners interested in adopting Kanban. The findings of this literature review are intended for helping researchers and practitioners to gain a better understanding of the current state of Kanban usage in software development.},
annote = {Pair programming emphasizes learning for weaker students. Not universally beneficial. Ok stuff},
archivePrefix = {arXiv},
arxivId = {NIHMS150003},
author = {Ahmad, Muhammad Ovais and Markkula, Jouni and Oivo, Markku},
booktitle = {Proceedings of the 39th Euromicro Conference Series on Software Engineering and Advanced Applications},
doi = {10.1109/SEAA.2013.28},
eprint = {NIHMS150003},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/ahmad2013.pdf:pdf},
isbn = {9780769550916},
issn = {1089-6503},
keywords = {kanban,lean approach,software development,systematic literature review},
pages = {9--16},
pmid = {16819197},
publisher = {IEEE},
title = {{Kanban in software development: A systematic literature review}},
year = {2013}
}
@article{Akkerman2011,
abstract = {Diversity and mobility in education and work present a paramount challenge that needs better conceptualization in educational theory. This challenge has been addressed by educational scholars with the notion of boundaries, particularly by the concepts of boundary crossing and boundary objects. Although studies on boundary crossing and boundary objects emphasize that boundaries carry learning potential, it is not explicated in what way they do so. By reviewing this literature, this article offers an understanding of boundaries as dialogical phenomena. The review of the literature reveals four potential learning mechanisms that can take place at boundaries: identification, coordination, reflection, and transformation. These mechanisms show various ways in which sociocultural differences and resulting discontinuities in action and interaction can come to function as resources for development of intersecting identities and practices.},
annote = {Boundary object stuff},
author = {Akkerman, Sanne and Bakker, Arthur},
doi = {10.3102/0034654311404435},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Akkerman, Bakker - 2011 - Boundary Crossing and Boundary Objects Difficulties with statistical graphs View project Educational Studies i.pdf:pdf},
isbn = {0034-6543},
issn = {08919976},
journal = {Review of Educational Research},
number = {2},
pages = {132--169},
pmid = {60442220},
title = {{Boundary Crossing and Boundary Objects}},
volume = {81},
year = {2011}
}
@inproceedings{Alhamad2010,
abstract = {Cloud computing has been a hot topic in the research community since 2007. In cloud computing, the online services are conducted to be pay-as-you-use. Service customers need not be in a long term contract with service providers. Service level agreements (SLAs) are agreements signed between a service provider and another party such as a service consumer, broker agent, or monitoring agent. Because cloud computing is a recent technology providing many services for critical business applications, reliable and flexible mechanisms to manage online contracts are very important. This paper presents the main criteria which should be considered at the stage of designing the SLA in cloud computing. Also, we investigate the negotiation strategies between cloud provider and cloud consumer and propose our method to maintain the trust and reliability between each of the parties involved in the negotiation process.},
annote = {Irrelevanttia },
archivePrefix = {arXiv},
arxivId = {1111.5230},
author = {Alhamad, Mohammed and Dillon, Tharam and Chang, Elizabeth},
booktitle = {4th IEEE International Conference on Digital Ecosystems and Technologies - Conference Proceedings of IEEE-DEST 2010, DEST 2010},
doi = {10.1109/DEST.2010.5610586},
eprint = {1111.5230},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Alhamad, Dillon, Chang - 2010 - Conceptual SLA framework for cloud computing.pdf:pdf},
isbn = {9781424455539},
issn = {2150-4938},
keywords = {Cloud computing,Negotiation,SLA,Trust management},
pages = {606--610},
pmid = {24173598},
title = {{Conceptual SLA framework for cloud computing}},
url = {https://espace.curtin.edu.au/bitstream/handle/20.500.11937/16988/152161{\_}152161.pdf?sequence=2{\&}isAllowed=y},
year = {2010}
}
@inproceedings{Allison2010,
abstract = {Previous work looking at software process improvement (SPI) in small organizations has highlighted difficulties faced by small organizations in implementing SPI successfully, but there is little analysis to understand why this is from an organization theory perspective. This paper presents an analysis of SPI across six software teams in the UK using a framework based on Giddens' Structuration Theory. Using a structurational perspective helps to draw out how the process improvements are enabled and constrained by their context. By comparing these across the six situations the key similarities and differences across the cases are highlighted. This work extends the existing literature by helping to identify the areas of risk that need managing in small SPI initiatives. The study shows the issues as pertained to the six contexts and actions in each case. The paper highlights how the context influences the outcome.},
annote = {Risks and challenges of process improvement, could be ok stuff to add somewhere},
author = {Allison, Ian},
booktitle = {Proceedings of the 7th International Conference on the Quality of Information and Communications Technology},
doi = {10.1109/QUATIC.2010.81},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Allison - Unknown - OpenAIR@RGU The Open Access Institutional Repository at Robert Gordon University Citation Details Organizational Fac.pdf:pdf},
isbn = {9780769542416},
keywords = {Small-medium enterprises,Software process improvement,Structuration theory},
pages = {418--423},
publisher = {IEEE},
title = {{Organizational factors shaping software process improvement in small-medium sized software teams: A multi-case analysis}},
year = {2010}
}
@inproceedings{Aranda2010,
abstract = {By virtue of their size, small organizations can take advantage of many opportunities to develop software efficiently and successfully , and they waste them if they try to emulate their larger counterparts. As software researchers, we should study how small organizations can best exploit those opportunities instead of prescribing solutions that were designed for organizations of a very different nature.},
annote = {Benefits of being small, could pose some interesting notes},
author = {Aranda, Jorge},
booktitle = {Proceedings of the 1st Workshop on RE in Small Companies},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Aranda - 2010 - Playing to the strengths of small organizations.pdf:pdf},
pages = {141--144},
title = {{Playing to the strengths of small organizations}},
year = {2010}
}
@article{B2012,
abstract = {Process mining techniques are able to extract knowledge from event logs commonly available in today's information systems. These techniques provide new means to discover, monitor, and improve processes in a variety of application domains. There are two main drivers for the growing interest in process mining. On the one hand, more and more events are being recorded, thus, providing detailed information about the history of processes. On the other hand, there is a need to improve and support business processes in competitive and rapidly changing environments. This manifesto is created by the IEEE Task Force on Process Mining and aims to promote the topic of process mining. Moreover, by defining a set of guiding principles and listing important challenges, this manifesto hopes to serve as a guide for software developers, scientists, consultants, business managers, and end-users. The goal is to increase the maturity of process mining as a new tool to improve the (re)design, control, and support of operational business processes. {\textcopyright} 2012 Springer-Verlag.},
annote = {Process mining based on events. Could be relevant, but is mainly not.
},
author = {B, Van Der Aalst W.a and A.a, Adriansyah and A.K.A.ax, De Medeiros and F.z, Arcieri and Ba, Baier T.k and T.f, Blickle and J.C.a, Bose and P.d, Van Den Brand and R.g, Brandtjen and J.a, Buijs and A.ab, Burattin and J.ac, Carmona and M.h, Castellanos and J.as, Claes and J.ad, Cook and N.u, Costantini and F.i, Curbera and E.aa, Damiani and M.a, De Leoni and P.ay, Delias and B.F.a, Van Dongen and M.ar, Dumas and S.at, Dustdar and D.a, Fahland and D.R.ae, Ferreira and W.aw, Gaaloul and F.x, Van Geffen and S.l, Goel and C.e, G{\"{u}}nther and A.af, Guzzo and P.q, Harmon and B, Ter Hofstede A.a and J.c, Hoogland and J.E.n, Ingvaldsen and K.j, Kato and R.g, Kuhn and A.ag, Kumar and M.b, La Rosa and F.a, Maggi and D.ah, Malerba and R.S.a, Mans and A.t, Manuel and M.o, McCreesh and P.al, Mello and J.ai, Mendling and M.az, Montali and H.R.h, Motahari-Nezhad and M.aj, Zur Muehlen and J.ac, Munoz-Gama and L.y, Pontieri and J.a, Ribeiro and A.e, Rozinat and H.w, Seguel P{\'{e}}rez and R.v, Seguel P{\'{e}}rez and M.au, Sep{\'{u}}lveda and J.r, Sinur and P.ak, Soffer and M.am, Song and A.ab, Sperduti and G.z, Stilo and C.c, Stoel and K.m, Swenson and M.z, Talamo and W.i, Tan and C.an, Turner and J.ao, Vanthienen and G.p, Varvaressos and E.a, Verbeek and M.s, Verdonk and R.u, Vigo and J.ap, Wang and B.aq, Weber and M.av, Weidlich and T.a, Weijters and L.ap, Wen and M.a, Westergaard and M.b, Wynn},
doi = {10.1007/978-3-642-28108-2_19},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/b et al. - 2012 - Process mining manifesto.pdf:pdf},
isbn = {9783642281075},
issn = {18651348},
journal = {Lecture Notes in Business Information Processing},
keywords = {Application domains,Business,Business managers,Data mining,Enterprise resource management,Information manage},
number = {PART 1},
pages = {169--194},
title = {{Process mining manifesto}},
url = {https://link.springer.com/content/pdf/10.1007/978-3-642-28108-2{\_}19.pdf http://www.scopus.com/inward/record.url?eid=2-s2.0-84863011087{\&}partnerID=40{\&}md5=480ca64ccc688944f7d185d63564261a},
volume = {99 LNBIP},
year = {2012}
}
@article{Babb2014,
abstract = {The theoretical underpinnings of agile principles emphasize regular reflection as a means to attain a sustainable development pace and continuous learning. In practice, high iteration pressure can diminish opportunities for ongoing learning and reflection threatening to deprive software teams of learning and reflection and possibly stagnating process evolution. The Reflective Agile Learning Model (REALM) combines insights and results from studies of agile development practices in India, New Zealand, and the US with Sch{\"{o}}n's theory of reflective practice. Using REALM, agile teams can establish self-organized learning as well as regular process maintenance and opportunities for process evolution to continuously improve practice. [ABSTRACT FROM PUBLISHER]},
annote = {Sharing knowledge in different phases. REALM model},
author = {Babb, Jeffry and Hoda, Rashina and N{\o}rbjerg, Jacob},
doi = {10.1109/MS.2014.54},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Babb, Hoda, N{\o}rbjerg - 2014 - Embedding reflection and learning into agile software development.pdf:pdf},
isbn = {0740-7459 VO - 31},
issn = {07407459},
journal = {IEEE Software},
keywords = {agile software development,learning organizations,learning teams,pervasive computing,project management,reflection-in-action,reflection-on-action,reflective practice,software engineering},
number = {4},
pages = {51--57},
title = {{Embedding reflection and learning into agile software development}},
volume = {31},
year = {2014}
}
@inproceedings{Baskerville2009,
abstract = {This paper proposes and evaluates a soft systems approach to design science research. Soft Design Science provides an approach to the development of new ways to improve human organizations, especially with consideration for social aspects, through the activities of design, development, instantiation, evaluation and evolution of a technological artifact. The Soft Design Science approach merges the common design science research process (design, build-artifact, evaluation) together with the iterative soft systems methodology. The design-build artifact-evaluation process is iterated until the specific requirements are met. The generalized requirements are adjusted as the process continues to keep alignment with the specific requirements. In the end, the artifact represents a general solution to a class of problems shown to operate in one instance of that class of problems. The proposed methodology is evaluated by an analysis of how it differs from, and could have informed and improved, a published design science study, which used a design-oriented action research method.},
annote = {Difference between design science and action research},
author = {Baskerville, Richard and Pries-Heje, Jan and Venable, John},
booktitle = {Proceedings of the 4th international conference on design science research in information systems and technology},
doi = {10.1145/1555619.1555631},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Baskerville, Pries-Heje, Venable - 2009 - Soft Design Science Methodology.pdf:pdf},
isbn = {9781605584089, 1605584088},
issn = {9781605584089},
keywords = {Action Research,Design Science Research,Research Methodology,Soft Design Science,Soft Systems Methodology},
publisher = {ACM},
title = {{Soft design science methodology}},
year = {2009}
}
@inproceedings{Basri2010,
abstract = {This paper is concerned with understanding the issues that affect the adoption of software process standards by Very Small Entities (VSEs), their needs from process standards and their willingness to engage with the new ISO/IEC 29110 standard in particular. In order to achieve this goal, a series of industry data collection studies were undertaken with a collection of VSEs. A twin track approach of a qualitative data collection (interviews and focus groups) and quantitative data collection (questionnaire) were undertaken. Data analysis was being completed separately and the final results were merged, using the coding mechanisms of grounded theory. This paper serves as a roadmap for both researchers wishing to understand the issues of process standards adoption by very small companies and also for the software process standards community.},
address = {Berlin},
annote = {Challenges in adopting ISO29110 standard in very small companies, related to other paper about ISO29110},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Basri, Shuib Bin and O'Connor, Rory V.},
booktitle = {Proceedings of the European Conference on Process Improvement},
doi = {10.1007/978-3-642-15666-3_14},
eprint = {arXiv:1011.1669v3},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Basri, O'Connor - 2010 - Understanding the perception of very small software companies towards the adoption of process standards.pdf:pdf},
isbn = {3642156657},
issn = {18650929},
keywords = {ISO/IEC 29110,SPI,VSE,process standards},
pages = {153--164},
pmid = {25246403},
publisher = {Springer},
title = {{Understanding the perception of very small software companies towards the adoption of process standards}},
year = {2010}
}
@inproceedings{Basri2010a,
author = {Basri, Shuib Bin and O'Connor, Rory V.},
booktitle = {Proceedings of the International Symposium on Technology},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/basri2010.pdf:pdf},
isbn = {9781424467167},
keywords = {-component,commitment,improvement,software process,spi,vse},
pages = {1456--1461},
publisher = {IEEE},
title = {{Organizational commitment towards software process improvement: an irish software VSEs case study}},
year = {2010}
}
@incollection{Basri2011,
abstract = {This chapter discusses knowledge management (KM) aspects of how software process and software process improvement (SPI) is practiced within very small entities (VSEs) in the context of Irish software development industry. In particular, this study is concerned with the process of software development knowledge management in supporting the SPI. In order to understand the support process, the authors of this chapter have studied how KM processes are practiced within VSEs which includes communica- tion, learning, sharing, and documentation process. This study also focuses in detail on the issues of the knowledge atrophy problem in VSEs. The findings explain how KM has been practiced and influenced the software development process and process improvement in VSEs. This result indicates that KM processes in VSEs are being undertaken in a very informal manner and also in indirect way. This is due to a small team size, autonomous working and macro-management style and caused VSEs to be more informal in their KM processes specifically and SPI generally. In addition, the results have indicated that the informal environment and culture helped VSEs to easily create and share knowledge between staff members and also assisted VSEs to mitigate the knowledge atrophy problem in their organization.},
address = {Hershey},
author = {Basri, Shuib Bin and O'Connor, Rory V.},
booktitle = {Knowledge Engineering for Software Development Life Cycles: Support Technologies and Applications},
chapter = {15},
doi = {10.4018/978-1-60960-509-4.ch015},
edition = {1.},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - 2011 - Knowledge Engineering for Software Development Life Cycles Support Technologies and Applications.pdf:pdf},
isbn = {9781609605094},
pages = {273--288},
publisher = {Information Science Reference},
title = {{Knowledge Management in Software Process Improvement: A case study of very small entities}},
year = {2011}
}
@article{Basri2011a,
abstract = {Problem statement: Software development is distinct from other types of engineering because the product is intangible, progress is not explicit and team members rely on the documentation of others to review progress. In addition, there are no standard processes, which make it difficult to predict which process will cause development problems. The discourse of knowledge management is becoming more evident in the software engineering literature, as the software development activity is essentially a human knowledge intensive activity. Approach: This study explores the role of software development knowledge management within software development companies. Specifically: How software knowledge is managed; identify critical factors in software development teams and software development knowledge management; understand how should software teams are organized in order to support software process improvement and the role of knowledge management in this. Results: This study presents the results of a study of knowledge management process practices in very small software companies and discusses these under the major identified issues of: Communication; Learning and sharing; Documentation and Knowledge management process and commitment. Conclusion: The findings in this study give an insight towards knowledge management practices as they relate to software development process practices in very small companies and the important factors that must be considered to preserve knowledge and quality software.},
annote = {Duplikaattia },
author = {Basri, Shuib and O'connor, Rory V},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Basri, O'connor - 2011 - A Study of Knowledge Management Process Practices in Very Small Software Companies.pdf:pdf},
issn = {1945-5488},
journal = {American Journal of Economics and Business Administration},
keywords = {Global Software Development (GSD),KM strategy,Knowledge Management (KM),Software Process Improvement (SPI),VSEs,knowledge sharing,software companies,statistical analysis},
number = {4},
pages = {636--644},
title = {{A Study of Knowledge Management Process Practices in Very Small Software Companies}},
url = {http://doras.dcu.ie/16861/1/A{\_}Study{\_}of{\_}Knowledge{\_}Management{\_}Process{\_}Practices{\_}in{\_}Very{\_}Small{\_}Software{\_}Companies.pdf},
volume = {3},
year = {2011}
}
@inproceedings{Baysal2012,
abstract = {Bug triaging is an error-prone, tedious and time-consuming task. However, little qualitative research has been done on the actual use of bug tracking systems, bug triage, and resolution processes. We are planning to conduct a qualitative study to understand the dynamics of bug triage and fixing process, as well as bug reassignments and reopens. We will study interviews conducted with Mozilla Core and Firefox developers to get insights into the primary obstacles developers face during the bug fixing process. Is the triage process flawed? Does bug review slow things down? Does approval takes too long? We will also categorize the main reasons for bug reassignments and reopens. We will then combine results with a quantitative study of Firefox bug reports, focusing on factors related to bug report edits and number of people involved in handling the bug.},
annote = {},
author = {Baysal, Olga and Holmes, Reid and Godfrey, Michael W},
booktitle = {2012 1st International Workshop on User Evaluation for Software Engineering Researchers, USER 2012 - Proceedings},
doi = {10.1109/USER.2012.6226578},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Baysal et al. - Unknown - Revisiting Bug Triage and Resolution Practices.pdf:pdf},
isbn = {9781467318594},
pages = {29--30},
title = {{Revisiting bug triage and resolution practices}},
url = {http://en.wikipedia.org/wiki/Card},
year = {2012}
}
@inproceedings{Bekkers2010,
abstract = {This paper presents a comprehensive overview of all the important areas within Software Product Management (SPM). The overview has been created and validated in collaboration with many experts from practice and the scientific community. It provides a list of 68 capabilities a product software organization should implement to reach a full grown SPM maturity. The overview consists of the SPM Competence Model that shows the areas of importance to SPM, and the SPM Maturity Matrix that lists all important activities within those areas in a best practice implementation order. SPM organizations can use this matrix to map and improve their SPM practices incrementally.},
annote = {Irrelevanttia },
author = {Bekkers, Willem and {Van De Weerd}, Inge and Spruit, Marco and Brinkkemper, Sjaak},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bekkers et al. - 2010 - A Framework for Process Improvement in Software Product Management.pdf:pdf},
isbn = {978-3-642-15665-6 978-3-642-15666-3},
keywords = {SPM Competence Model,SPM Maturity Matrix,Situational Assessment Method,Software Process Improvement,Software Product Management},
pages = {1--12},
title = {{A Framework for Process Improvement in Software Product Management}},
url = {http://www.cs.uu.nl/groups/OI/downloads/bekkers paper.pdf http://link.springer.com/10.1007/978-3-642-15666-3{\_}1},
volume = {99},
year = {2010}
}
@misc{Benestad2009,
abstract = {Understanding, managing and reducing costs and risks inherent in change are key challenges of software maintenance and evolution, addressed in empirical studies with many different research approaches. Change-based studies analyze data that describes the individual changes made to software systems. This approach can be effective in order to discover cost and risk factors that are hidden at more aggregated levels. However, it is not trivial to derive appropriate measures of individual changes for specific measurement goals. The purpose of this review is to improve change-based studies by (1) summarizing how attributes of changes have been measured to reach specific study goals and (2) describing current achievements and challenges, leading to a guide for future change-based studies. Thirty-four papers conformed to the inclusion criteria. Forty-three attributes of changes were identified, and classified according to a conceptual model developed for the purpose of this classification. The goal of each study was to either characterize the evolution process, to assess causal factors of cost and risk, or to predict costs and risks. Effective accumulation of knowledge across change-based studies requires precise definitions of attributes and measures of change. We recommend that new change-based studies base such definitions on the proposed conceptual model. Copyright {\textcopyright} 2009 John Wiley {\&} Sons, Ltd.},
annote = {Literature review on software maintenance and evolution, probably interesting

Melko },
archivePrefix = {arXiv},
arxivId = {1408.1293},
author = {Benestad, Hans Christian and Anda, Bente and Arisholm, Erik},
booktitle = {Journal of Software Maintenance and Evolution},
doi = {10.1002/smr.412},
eprint = {1408.1293},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Benestad, Anda, Arisholm - 2009 - Understanding software maintenance and evolution by analyzing individual changes A literature review.pdf:pdf},
isbn = {1532-060X},
issn = {1532060X},
keywords = {Change-based studies,Conceptual model,Software change},
number = {6},
pages = {349--378},
pmid = {67195556},
title = {{Understanding software maintenance and evolution by analyzing individual changes: A literature review}},
url = {www.interscience.wiley.com},
volume = {21},
year = {2009}
}
@inproceedings{Bertram2010,
abstract = {Issue tracking systems help organizations manage issue reporting, assignment, tracking, resolution, and archiving. Traditionally, it is the Software Engineering community that researches issue tracking systems, where software defects are reported and tracked as ‘bug reports' within an archival database. Yet, as issue tracking is fundamentally a social process, it is important to understand the design and use of issue tracking systems from that perspective. Consequently, we conducted a qualitative study of issue tracking systems as used by small, collocated software development teams. We found that an issue tracker is not just a database for tracking bugs, features, and inquiries, but also a focal point for communication and coordination for many stakeholders within and beyond the software team. Customers, project managers, quality assurance personnel, and programmers all contribute to the shared knowledge and persistent communication that exists within the issue tracking system. These results were all the more striking because in spite of teams being collocated—which afforded frequent, face-to-face communication—the issue tracker was still used as a fundamental communication channel. We articulate various real-world practices surrounding issue trackers and offer design considerations for future systems.},
author = {Bertram, Dane and Voida, Amy and Greenberg, Saul and Walker, Robert},
booktitle = {Proceedings of the 2010 ACM conference on Computer supported cooperative work},
doi = {10.1145/1718918.1718972},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bertram et al. - 2010 - Communication, Collaboration, and Bugs The Social Nature of Issue Tracking in Small, Collocated Teams.pdf:pdf},
isbn = {9781605587950},
keywords = {Author Keywords Shared knowledge,Design,HCI)]: Group and Organization Interfaces-CSCW,Human Factors,K63 [Management of Computing and Information Syste,issue tracking,software engineering ACM Classification Keywords H},
pages = {291--300},
publisher = {ACM},
title = {{Communication, collaboration, and bugs: The social Nature of Issue Tracking in Small, Collocated Teams}},
year = {2010}
}
@article{Bhattacharyya2011,
author = {Bhattacharyya, Ena},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bhattacharyya - 2011 - Communicative Competence Requirement in Technical Oral Presentation in Engineering Education Stakeholder Percepti.pdf:pdf},
journal = {Journal of Applied Sciences},
number = {7},
pages = {1291--1296},
title = {{Communicative Competence Requirement in Technical Oral Presentation in Engineering Education: Stakeholder Perceptions in a Malaysian Context}},
volume = {11},
year = {2011}
}
@inproceedings{Boden2009,
abstract = {Software development requires complex context specific knowledge regarding the particularities of different technologies, the potential of existing software and the needs and expectations of the users. Hence, efficient knowledge management counts amongst the most important challenges for software teams. In international teams, one of the most important issues regarding knowledge sharing is the impact of culture under different aspects: national, organizational and professional. There seem to be very few studies dealing with the issue of culture in regard to knowledge management practices in GSE. We want to contribute to the discussion by presenting case studies of small size software teams dealing with international software development in the context of offshoring. In doing so, we illustrate how cultural and social issues influence the way knowledge exchange is performed by analyzing several knowledge management practices, considering the role of meetings, artifacts and tools, knowledge brokers and mutual visits between sites.},
annote = {Irrelevanttia },
author = {Boden, Alexander and Avram, Gabriela and Bannon, Liam and Wulf, Volker},
booktitle = {Proceedings - 2009 4th IEEE International Conference on Global Software Engineering, ICGSE 2009},
doi = {10.1109/ICGSE.2009.10},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Boden et al. - 2009 - Knowledge management in distributed software development teams - does culture matter.pdf:pdf},
isbn = {9780769537108},
issn = {2329-6305},
pages = {18--27},
pmid = {26834832},
title = {{Knowledge management in distributed software development teams - does culture matter?}},
url = {https://www.researchgate.net/publication/221016330},
year = {2009}
}
@article{Boone2012,
annote = {Likert scale},
author = {Boone, Harry N. Jr. and Boone, Deborah A.},
doi = {10.1016/j.jfma.2016.04.007},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/LikertScalevsLikertItemGoodSource.pdf:pdf},
issn = {1876-0821},
journal = {Journal of Extension},
keywords = {CD20 antigen,CD3 antigen,Graves disease,adult,article,autoimmune hypophysitis,autoimmune pancreatitis,case report,computer assisted tomography,corticosteroid therapy,desmopressin,drug dose reduction,early diagnosis,endoscopic surgery,endoscopic transphenoidal surgery,female,follow up,histopathology,hormone substitution,human,human tissue,hypophysis disease,hypophysitis,hypopituitarism,immunoglobulin G4,immunoglobulin G4 related disease,immunoglobulin blood level,immunoglobulin g4 related hypophysitis,interstitial nephritis,lymphocytic hypophysitis,male,middle aged,nuclear magnetic resonance imaging,prednisolone,x-ray computed tomography},
number = {2},
pages = {1--5},
title = {{Analyzing Likert Data}},
volume = {50},
year = {2012}
}
@techreport{Buse2011,
abstract = {Software development is a data rich activity with many sophisticated metrics. Yet engineers often lack the tools and techniques necessary to leverage these potentially powerful information resources toward decision making. In this paper, we present the data and analysis needs of professional software engineers, which we identified among 110 developers and managers in a survey. We asked about their decision making process, their needs for artifacts and indicators, and scenarios in which they would use analytics. The survey responses lead us to propose several guidelines for analytics tools in software development including: Engineers do not necessarily have much expertise in data analysis; thus tools should be easy to use, fast, and produce concise output. Engineers have diverse analysis needs and consider most indicators to be important; thus tools should at the same time support many different types of artifacts and many indicators. In addition, engineers want to drill down into data based on time, organizational structure, and system architecture. We validated our guidelines with a proof-of-concept implementation of an analytics tool, which we used to solicit additional feedback from engineers on how future analytics tools should be designed.},
annote = {General metrics stuff
},
author = {Buse, Raymond P.L. and Zimmermann, Thomas},
booktitle = {MSR Tech Report 2011-8},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Buse, Zimmermann - 2011 - Information Needs for Software Development Analytics.pdf:pdf},
institution = {Microsoft Research},
title = {{Information Needs for Software Development Analytics}},
url = {https://web.eecs.umich.edu/{~}weimerw/481/readings/infose.pdf http://research.microsoft.com/apps/pubs/default.aspx?id=144543},
year = {2011}
}
@article{Carmeli2013,
abstract = {This article presents two studies that examine whether leader supportive behaviors facilitate knowledge sharing and employee creative problem- solving capacity, thereby enhancing creative performance. The fi ndings from both studies indicate that leader supportive behaviors are directly and indirectly related, through both internal and external knowledge shar- ing, to employee creative problem-solving capacity. In addition, creative problem solving was related to the two dimensions of creative perfor- mance—fl uency and originality. However, a test of the mediation model indicated that creative problem solving only mediated the relationship between internal knowledge sharing creative performance and original- ity. These fi ndings highlight the complex process by which leaders fa- cilitate both internal and external knowledge sharing and employee creative problem-solving capacity, thereby improving employee creative performance.},
annote = {Melko 

General leadership bs and so forth, not probably relevant},
archivePrefix = {arXiv},
arxivId = {1},
author = {Carmeli, Abraham and Gelbard, Roy and Reiter-Palmon, Roni},
doi = {10.1002/hrm.21514},
eprint = {1},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Carmeli, Gelbard, Reiter-Palmon - 2013 - Leadership, Creative Problem-Solving Capacity, and Creative Performance The Importance of Knowl.pdf:pdf},
isbn = {9780708713815},
issn = {00904848},
journal = {Human Resource Management},
keywords = {Creative problem-solving capacity,Creativity,Knowledge sharing,Leadership},
number = {1},
pages = {95--121},
pmid = {21138203},
title = {{Leadership, Creative Problem-Solving Capacity, and Creative Performance: The Importance of Knowledge Sharing}},
url = {https://en-coller.tau.ac.il/sites/nihul{\_}en.tau.ac.il/files/RP{\_}237{\_}Carmeli.pdf},
volume = {52},
year = {2013}
}
@article{CMMIProductTeam2010,
abstract = {CMMI{\textregistered} (Capability Maturity Model{\textregistered} Integration) models are collections of best practices that help organizations to improve their processes. These models are developed by product teams with members from industry, government, and the Software Engineering Institute (SEI). This model, called CMMI for Services (CMMI-SVC), provides a comprehensive integrated set of guidelines for providing superior services.},
author = {{CMMI Product Team}},
doi = {CMU/SEI-2010-TR-033 ESC-TR-2010-033},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Product Team - 2010 - CMMI {\textregistered} for Development, Version 1.3 Improving processes for developing better products and services.pdf:pdf},
isbn = {CMU/SEI-2006-TR-008},
issn = {CMU/SEI-2010-TR-033},
journal = {Software Engineering Institute},
keywords = {CMMI,CMMI for Development,Development,Version 1},
title = {{CMMI for Development, Version 1.3: Improving Processed for Better Products and Services}},
year = {2010}
}
@article{Coghlan2011,
abstract = {In the context of management and organization studies, the potential of action research for generating robust actionable knowledge has not been yet realized. While there are historical reasons for this with roots in different philosophies of social science, there are areas of common ground that may be explored fruitfully. This paper works from the insight that there are two key perspec- tives on action research: one from inside the action research community and one from outside. It explores how action research is a form of science in the realm of practical knowing and that this perspective provides an insight into how the views of action research from inside and from outside may be engaged. It proposes a general empirical method and the notion of interiority, based on the operations of human knowing, with a focus on how we know, rather than on what we know, as a synthesis, whereby the two perspectives on action research may be engaged.},
author = {Coghlan, David},
doi = {10.1080/19416520.2011.571520},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/Coghlan 2011.pdf:pdf},
isbn = {1941-6520},
issn = {19416520},
journal = {Academy of Management Annals},
number = {1},
pages = {53--87},
pmid = {20847034},
title = {{Action research: Exploring perspectives on a philosophy of practical knowing}},
volume = {5},
year = {2011}
}
@article{Concas2013,
abstract = {In this paper, an approach for information systems reverse engineering is proposed and applied. The aim is to support a unified perspective to the reverse engineering process of both data and software. At the state of the art, indeed, many methods, techniques, and tools for software reverse engineering have been proposed to support program comprehension, software maintenance, and software evolution. Other approaches and tools have been proposed for data reverse engineering, with the aim, for example, to provide complete and up-to-date documentation of legacy databases. However, the two engineering communities often worked independently, and very few approaches addressed the reverse engineering of both data and software as information system's constituencies. Hence, a higher integration is needed to support a better co-evolution of databases and programs, in an environment often characterized by high availability of data and volatility of information flows. Accordingly, the approach we propose leverages the detection of object-relational mapping design patterns to build a conceptual schema of the software under analysis. Then, the conceptual schema is mapped to the domain model of the system, to support the design of the evolution of the information system itself. The approach is evaluated on two large-scale open-source enterprise applications. Copyright {\textcopyright} 2014 John Wiley {\&} Sons, Ltd.},
annote = {Kanban WIP limits},
archivePrefix = {arXiv},
arxivId = {1408.1293},
author = {Concas, Giulio and Lunesu, Maria Ilaria and Marchesi, Michele and Zhang, Hongyu},
doi = {10.1002/smr.1599},
eprint = {1408.1293},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lunesu et al. - 2013 - Simulation of software maintenance process, with and without a work-in-process limit.pdf:pdf},
isbn = {9781450330565},
issn = {20477481},
journal = {Journal of software: Evolution and Process},
keywords = {Kanban,Lean software development,empirical software engineering,software maintenance process,software process simulation},
number = {12},
pages = {1225--1248},
pmid = {67195556},
title = {{Simulation of software maintenance process, with and without a work-in-process limit}},
volume = {25},
year = {2013}
}
@book{Dalkir2013,
abstract = {As knowledge management becomes embedded within organizations it becomes more important for students to understand its principles and applications. In this textbook, Dr. Kimiz Dalkir provides a comprehensive overview of the field on knowledge management with an emphasis on translating theory into practice. Working from a multidisciplinary perspective, Dr. Dalkir weaves key concepts, tools, and techniques from sociology, cognitive science, content management, knowledge engineering, cybernetics, organizational behaviour, change management, and information science into a three-level approach to understand Knowledge Management from the individual, community, and organization levels. Using everyday language and clear illustrations, Dr. Dalkir integrates theory and practice in a highly accessible manner to provide students with a comprehensive and practical knowledge management skill set.},
annote = {300+ pages of n{\"{o}}liz m{\"{a}}niz stuff},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Dalkir, Kimiz},
booktitle = {Knowledge Management in Theory and Practice},
doi = {10.4324/9780080547367},
eprint = {arXiv:1011.1669v3},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dalkir - 2013 - Knowledge management in theory and practice.pdf:pdf},
isbn = {9780080547367},
issn = {00104620},
pages = {1--356},
pmid = {120417},
publisher = {Routledge},
title = {{Knowledge management in theory and practice}},
year = {2013}
}
@article{Davison2004,
abstract = {Despite the growing prominence of canonical action research (CAR) in the information systems discipline, a paucity of methodological guidance continues to hamper those conducting and evaluating such studies. This article elicits a set of five principles and associated criteria to help assure both the rigor and the relevance of CAR in information systems. The first principle relates to the development of an agreement that facilitates collaboration between the action researcher and the client. The second principle is based upon a cyclical process model for action research that consists of five stages: diagnosis, planning, intervention , evaluation and reflection. Additional principles highlight the critical roles of theory, change through action, and the specification of learning in terms of implications for both research and practice. The five principles are illustrated through the analysis of one recently published CAR study.},
annote = {Quite general stuff about CAR},
author = {Davison, Robert M. and Martinsons, Maris G. and Kock, Ned},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Davison, M.G., N. - 2004 - Principles of Canonical Action Research.pdf:pdf},
journal = {Information Systems Journal},
keywords = {canonical action research,inter-,meta-analysis,organizational change,organizational learning,pretivism,research frameworks},
number = {1},
pages = {65--86},
title = {{Principles of Canonical Action Research}},
volume = {14},
year = {2004}
}
@inproceedings{Demir2009,
abstract = {Natural carbohydrates have been popularly used as a material for centuries in all kinds of pharmaceutical applications. It is the world's most abundant renewable and biodegradable polymer. Isabgol has been popularly used as therapeutic agent for the treatment of constipation, diarrhea, irritable syndrome, inflammatory bowel disease, ulcerative colitis, colon cancer, diabetes, and hypercholesterolemia The uniqueness of the chemical structures and macromolecular configurations of mucilage obtain from the Isabgol (plantago ovata forskal) has attracted Carbohydrate chemists in last decade, as the hydrogel produced by it is rigid, difficult to brake, to dissolve. Ironically solubility, flexibility is very important criteria for materials to be used in pharmacy. To meet these criteria chemical modifications of isabgol husk mucilage is indispensable so that it can be transformed into carrier for new drug delivery system, as a low cost non –conventional source for the using pharmaceutical formulations as an “Excipient”, which can improve its procesability and performance for specific application in the broad field of pharmacy. Exploitation of Isabgol husk mucilage as an “Excipient” and its innovative, non-conventional applications, chemical derivatization, use of its derivative in modern fashion of drug designing has become a room for inventions for research scholar. Gums and Mucilage are naturally occurring biopolymers, finding increasing applications in pharmaceutical and biotechnology industry. It has been used successfully for many years in the food and pharmaceutical industry as a thickening agent, as a gelling agent, and as a colloidal stabilizer. Mucilage also has several unique properties that have enabled it to be used as a matrix for entrapment and/or delivery of variety of drugs, proteins, and cells. .Being a naturally occurring polysaccharide, in recent year it has gained increased importance in industrial applications. The benefits of natural carbohydrates are also more and more appreciated by the scientists and consumers from various industries due to its inertness, biocompatibility, and biodegradability.},
archivePrefix = {arXiv},
arxivId = {0807.2892},
author = {Demir, K A},
booktitle = {Proceedings of the 2009 Conference on Software Engineering Research and Practice},
doi = {10.1088/0004-637X/693/1/1029},
eprint = {0807.2892},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Demir - 2009 - A Survey on Challenges of Software Project Management.pdf:pdf},
issn = {0004-637X},
keywords = {empirical software,empirical study software,management challenges,projects,software project,software project management,software projects survey},
pages = {579--585},
title = {{A Survey on Challenges of Software Project Management}},
year = {2009}
}
@inproceedings{Desharnais2010,
abstract = {Maturity models assess the organization's processes to determine their level of maturity and capability. There is an implicit assumption that a higher level of maturity (or more capability) leads to higher level of productivity and quality. Based on this assumption, maintenance organizations that implement a number of exemplary practices should show an improvement in both. In this article, we use data from a maintenance organization to verify this assumption. The introduction presents the challenges associated with the measurement of software maintenance productivity and quality. We then introduce our methodology, followed by an analysis of the data, and, finally, lessons learned and future work. {\textcopyright} 2010 ACM.},
annote = {Measurements of software maintenance

Not exactly relevant, categories were nice tho},
author = {Desharnais, Jean-Marc and April, Alain},
booktitle = {Proceedings of the 11th International Conference on Product Focused Software},
doi = {10.1145/1961258.1961289},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Desharnais, April - 2010 - Software maintenance productivity and maturity GOAT Genetic Output Analysis Tool An open source GWAS and gen.pdf:pdf},
isbn = {9781450302814},
issn = {07421222},
keywords = {S3m,Software maintenance,maturity model,productivity measures},
pages = {121--125},
publisher = {ACM},
title = {{Software maintenance productivity and maturity}},
year = {2010}
}
@inproceedings{Destefanis2014,
abstract = {This paper presents a software metrics analysis of eight object-oriented systems. Five systems had been developed using Agile methodologies and three using plan-driven methodologies; three systems were written in Python and five in Java. For each system, we considered 10 traditional metrics such as LOC and the Chidamber and Kemerer metrics. These metrics were computed at class level. In our study we present empirical results considering systems developed with Agile methodologies and we compare them with previous results for non Agile systems. In particular, we verify that the distributions of software metrics in a software system developed using Agile methodologies does not differ from the distribution in systems developed using plan-driven methodologies. {\textcopyright} Springer International Publishing Switzerland 2014.},
annote = {},
author = {Destefanis, Giuseppe and Counsell, Steve and Concas, Giulio and Tonelli, Roberto},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-319-06862-6},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Destefanis et al. - 2014 - Software metrics in agile software An empirical study.pdf:pdf},
isbn = {9783319068619},
issn = {18651348},
keywords = {Agile,Data mining,Object-oriented programming,Software metrics},
pages = {157--170},
title = {{Software metrics in agile software: An empirical study}},
url = {https://www.researchgate.net/publication/263272715},
volume = {179 LNBIP},
year = {2014}
}
@article{Doody2013,
abstract = {Aim To describe three styles of interviews and discuss issues regarding planning and conducting interviews. Background Interviews are probably the approach most used to collect data in studies. They are particularly useful in uncovering the story behind a participant's experiences. Researchers can follow a line of questions to gain information about a topic, or further explore responses or findings. But the researcher needs to plan and decide the format of the interview before collecting data.},
author = {Doody, Owen and Noonan, Maria},
doi = {10.7748/nr2013.05.20.5.28.e327},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Doody B.Sc, R.N.I.D., Noonan BSc, R.T., R.M. - 2013 - Preparing and conducting interviews to collect data(2).pdf:pdf},
issn = {1351-5578},
journal = {Nurse Researcher},
number = {5},
pages = {28--32},
title = {{Preparing and conducting interviews to collect data}},
volume = {20},
year = {2013}
}
@techreport{Durdik,
abstract = {Economically sustainable software systems must be able to cost-effectively evolve in response to changes in their environment, their usage profile, and business demands. However, in many software development projects, sustainability is treated as an afterthought, as developers are driven by time-to-market pressure and are often not educated to apply sustainability-improving techniques. While software engineering research and practice has suggested a large amount of such techniques, a holistic overview is missing and the effectiveness of individual techniques is often not sufficiently validated. On this behalf we created a catalog of "software sustainability guidelines" to support project managers, software architects, and developers during system design, development, operation, and maintenance. This paper describes how we derived these guidelines and how we applied selected techniques from them in two industrial case studies. We report several lessons learned about sustainable software development.},
annote = {Planning for maintenance beforehand
Maintainability, },
author = {Durdik, Zoya and Klatt, Benjamin and Koziolek, Heiko and Krogmann, Klaus and Stammel, Johannes and Weiss, Roland},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Durdik et al. - Unknown - Sustainability Guidelines for Long-Living Software Systems.pdf:pdf},
keywords = {Index Terms-Software maintenance,guidelines,software engineering,sustainable development},
title = {{Sustainability Guidelines for Long-Living Software Systems}},
url = {http://www.koziolek.de/docs/Durdik2012-ICSM-preprint.pdf}
}
@incollection{Dyba2014,
abstract = {Agile software development represents a new approach for planning and managing software projects. It puts less emphasis on up-front plans and strict control and relies more on informal collaboration, coordination, and learning. This chapter provides a characterization and definition of agile project management based on extensive studies of industrial projects. It explains the circumstances behind the change from traditional management with its focus on direct supervision and standardization of work processes, to the newer, agile focus on self-managing teams, including its opportunities and benefits, but also its complexity and challenges. The main contribution of the chapter is the four principles of agile project management: minimum critical specification, autonomous teams, redundancy, and feedback and learning.},
address = {Berlin},
annote = {Might be some good quotes},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Dyb{\aa}, Tore and Dingsoyr, Torgeir and Moe, Nils Brede},
booktitle = {Software Project Management in a Changing World},
chapter = {11},
doi = {10.1007/978-3-642-55035-5_11},
editor = {Ruhe, G and Wohlin, C},
eprint = {arXiv:1011.1669v3},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Dyb{\aa}, Dingsoyr, Moe - 2014 - Agile project management.pdf:pdf},
isbn = {9783642550355},
issn = {00010782},
pages = {277--300},
pmid = {20050843},
publisher = {Springer-Verlag},
title = {{Agile project management}},
volume = {9783642550},
year = {2014}
}
@incollection{Easterbrook2008,
abstract = {Selecting a research method for empirical software engineering research is problematic because the benefits and challenges to using each method are not yet well catalogued. Therefore, this chapter describes a number of empirical methods available. It examines the goals of each and analyzes the types of questions each best addresses. Theoretical stances behind the methods, practical considerations in the application of the methods and data collection are also briefly reviewed. Taken together, this information provides a suitable basis for both understanding and selecting from the variety of methods applicable to empirical software engineering.},
address = {London},
annote = {Method selection, probably general stuff about different methods and is useful for method validation

Also stuff about validity and so on},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Easterbrook, Steve and Singer, Janice and Storey, Margaret Anne and Damian, Daniela},
booktitle = {Guide to Advanced Empirical Software Engineering},
chapter = {11},
doi = {10.1007/978-1-84800-044-5_11},
eprint = {arXiv:1011.1669v3},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Easterbrook et al. - 2008 - Selecting Empirical Methods for Software Engineering Research BT - Guide to Advanced Empirical Software Engi.pdf:pdf},
isbn = {9781848000438},
issn = {{\textless}null{\textgreater}},
pages = {285--311},
pmid = {6565},
publisher = {Springer},
title = {{Selecting empirical methods for software engineering research}},
year = {2008}
}
@inproceedings{Emeakaroha2012,
abstract = {Cloud resources and services are offered based on Service Level Agreements (SLAs) that state usage terms and penalties in case of violations. Although, there is a large body of work in the area of SLA provisioning and monitoring at infrastructure and platform layers, SLAs are usually assumed to be guaranteed at the application layer. However, application monitoring is a challenging task due to monitored metrics of the platform or infrastructure layer that cannot be easily mapped to the required metrics at the application layer. Sophisticated SLA monitoring among those layers to avoid costly SLA penalties and maximize the provider profit is still an open research challenge. This paper proposes an application monitoring architecture named CASViD, which stands for Cloud Application SLA Violation Detection architecture. CASViD architecture monitors and detects SLA violations at the application layer, and in- cludes tools for resource allocation, scheduling, and deployment. Different from most of the existing monitoring architectures, CASViD focuses on application level monitoring, which is rel- evant when multiple customers share the same resources in a Cloud environment.We evaluate our architecture in a real Cloud testbed using applications that exhibit heterogeneous behaviors in order to investigate the effective measurement intervals for efficient monitoring of different application types. The achieved results show that our architecture, with low intrusion level, is able to monitor, detect SLA violations, and suggest effective measurement intervals for various workloads.},
annote = {},
author = {Emeakaroha, Vincent C and Ferreto, Tiago C and Netto, Marco A.S. and Brandic, Ivona and {De Rose}, Cesar A.F.},
booktitle = {Proceedings - International Computer Software and Applications Conference},
doi = {10.1109/COMPSAC.2012.68},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Emeakaroha et al. - Unknown - CASViD Application Level Monitoring for SLA Violation Detection in Clouds.pdf:pdf},
isbn = {9780769547367},
issn = {07303157},
keywords = {Application monitoring,Cloud resource provisioning,SLA management,Service level agreement},
pages = {499--508},
title = {{CASViD: Application level monitoring for SLA violation detection in clouds}},
url = {http://www.infosys.tuwien.ac.at/Staff/ivona/papers/Emeakaroha{\_}COMPSAC2012{\_}manuscript.pdf},
year = {2012}
}
@article{Ersoy2015,
abstract = {In today's economy, enterprises require knowledge more than ever before. Employees are being classified through their skill set and experience, where the tacit knowledge of individuals is the key factor. The effect of knowledge hunger can be easily seen in agile software development teams. To sustain the quality permanence of software development, it is essential to transform individuals' tacit knowledge to core organizational knowledge. To achieve this goal, every software development process utilizes different knowledge sharing and creation approaches. In this paper, knowledge sharing issues are surveyed and categorized into: 1) sociological issues, 2) documentation issues, and 3) implementation issues with/without pair programming. Finally, a proposed technique, Knowledge Temple, is introduced as feasible improvement to well-known knowledge sharing problems for small agile software development teams.},
author = {Ersoy, I. Burak and Mahdy, Ahmed M.},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ersoy, Mahdy - 2015 - Agile Knowledge Sharing.pdf:pdf},
journal = {International Journal of Software Engineering},
keywords = {Agile Software Development,Knowledge Creation,Knowledge Hoarding,Knowledge Loss,Knowledge Sharing},
number = {1},
pages = {1--15},
title = {{Agile Knowledge Sharing}},
volume = {6},
year = {2015}
}
@inproceedings{Faegri2009,
abstract = {For many organizations the transition to agile methods is problematic due to history of bureaucratization and subsequent extensive specialization of knowledge among people. Specialist knowledge inhibits self-organization and role interchangeability which are key elements of agile development. Knowing that bureaucracies are hard to counteract once established, how can development of general knowledge in software organizations be improved? Job rotation is a well-known practice often used to improve general knowledge. The reported action research evaluated job rotation among developers in customer support. The findings suggest that general knowledge is considered interesting and valuable among the participants. However, the findings also show that general knowledge acquisition can be found irrelevant and therefore counter-efficient for day-to-day work among participants if the perceived applicability to own projects is too low. Therefore, using job rotation to improve general knowledge requires careful considerations. Implications for research and practice are discussed.},
annote = {Job rotation stuff},
author = {F{\ae}gri, Tor Erlend},
booktitle = {Proceedings of the 2009 Agile Conference},
doi = {10.1109/AGILE.2009.69},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/F{\ae}gri - 2009 - Improving general knowledge in agile software organizations Experiences with job rotation in customer support.pdf:pdf},
isbn = {9780769537689},
keywords = {Adoption of agile methods,Agile methods,Agile organizations,Job rotation,Organizational learning},
pages = {49--56},
publisher = {IEEE},
title = {{Improving general knowledge in agile software organizations: Experiences with job rotation in customer support}},
year = {2009}
}
@article{Faja2011,
abstract = {Ability to work in teams has been considered one of the most important learning outcomes of the information systems curriculum. Industry's pair programming methodology has been adopted in the recent years as a form of collaborative learning in academic settings. This study reviews the existing body of research aiming two achieve two objectives. First, analyze adoption of pair programming as a pedagogical method using theories based on team learning research. The team effectiveness model was adapted as a framework for analysis, focusing on the outcomes such as facilitation of student learning and fostering of team skills. Second, this study aims to inform information system educators about the viability of using this technique in programming courses.},
annote = {Nothing new
},
author = {Faja, Silvana},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Faja - 2011 - Pair programming as a team based learning activity A review of research.pdf:pdf},
journal = {Issues in Information Systems},
keywords = {Ass 3,QIBT 1020,pair programming},
number = {2},
pages = {207--216},
title = {{Pair programming as a team based learning activity: A review of research}},
url = {http://iacis.org/iis/2011/207-216{\_}AL2011{\_}1700.pdf},
volume = {XII},
year = {2011}
}
@misc{Fatema2014,
abstract = {The efficient management of Cloud infrastructure and deployments is a topic that is currently attracting significant interest. Complex Cloud deployments can result in an intricate layered structure. Understanding the behaviour of these hierarchical systems and how to manage them optimally are challenging tasks that can be facilitated by pervasive monitoring. Monitoring tools and techniques have an important role to play in this area by gathering the information required to make informed decisions. A broad variety of monitoring tools are available, from general-purpose infrastructure monitoring tools that predate Cloud computing, to high-level application monitoring services that are themselves hosted in the Cloud. Surveying the capabilities of monitoring tools can identify the fitness of these tools in serving certain objectives. Monitoring tools are essential components to deal with various objectives of both Cloud providers and consumers in different Cloud operational areas. We have identified the practical capabilities that an ideal monitoring tool should possess to serve the objectives in these operational areas. Based on these identified capabilities, we present a taxonomy and analyse the monitoring tools to determine their strength and weaknesses. In conclusion, we present our reflections on the analysis, discuss challenges and identify future research trends in the area of Cloud monitoring. {\textcopyright} 2014 Elsevier Inc. All rights reserved.},
author = {Fatema, Kaniz and Emeakaroha, Vincent C and Healy, Philip D and Morrison, John P and Lynn, Theo},
booktitle = {Journal of Parallel and Distributed Computing},
doi = {10.1016/j.jpdc.2014.06.007},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Fatema et al. - 2014 - A survey of Cloud monitoring tools Taxonomy, capabilities and objectives.pdf:pdf},
isbn = {0743-7315},
issn = {07437315},
keywords = {Capabilities,Cloud management,Cloud operational areas,Monitoring tools,Survey,Taxonomy},
number = {10},
pages = {2918--2933},
pmid = {24279835},
title = {{A survey of Cloud monitoring tools: Taxonomy, capabilities and objectives}},
volume = {74},
year = {2014}
}
@misc{Finder.fi2019,
author = {Finder.fi},
title = {{QOCO Systems Oy - Y-tunnus: 2292619-7 - Yritystiedot, taloustiedot, p{\"{a}}{\"{a}}tt{\"{a}}j{\"{a}}t {\&} hallituksen j{\"{a}}senet}},
url = {https://www.finder.fi/Sovellukset+ja+ohjelmistot/QOCO+Systems+Oy/Espoo/yhteystiedot/2350890},
urldate = {2019-01-14},
year = {2019},
note = "Accessed 14.1.2019"
}
@inproceedings{Fitzgerald2014,
abstract = {Humic matter fractions from modern sediments of Lake Huron and Lake Michigan have been compared. Large yields of saccharinic acids from alkaline hydrolysis suggest that these fractions contain large portions of carbohydrate materials. Evidence for contributions of aquatic lipid (C-16 fatty acids) and of liginin (phenolic acids) to these sediments is also present in the hydrolysis products. Qualitative differences among fulvic acid, humic acid and humin from the same lake are minor, suggesting common (or similar) organic sources for these fractions. The lability of sedimentary humic matter to alkaline hydrolysis is inversely related to its degree of exposure to oxidative weathering. Lability may also be related to diagenetic state as fulvic acids generally yield greater quantities of hydrolysis components than humic acids which in turn yield more than humin. {\textcopyright} 1983.},
annote = {Lean, Kaizen, continuous improvement etc.},
author = {Fitzgerald, Brian and Stol, Klaas-Jan},
booktitle = {Proceedings of the 1st International Workshop on Rapid Continuous Software Engineering},
doi = {10.1016/0146-6380(83)90023-2},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Fitzgerald, Stol - 2014 - Continuous software engineering and beyond trends and challenges.pdf:pdf},
isbn = {9781450328562},
issn = {01466380},
keywords = {BizDev,Continuous Star,DevOps,continuous software engineering},
pages = {1--9},
publisher = {ACM},
title = {{Continuous software engineering and beyond: trends and challenges}},
volume = {14},
year = {2014}
}
@article{Fuller2011,
abstract = {This article introduces ‘virtual design competitions' as a new means of opening up the innovation process and enriching the companies, ‘design‐ideas' by utilizing the creativity of a multiplicity of external designers and enthused consumers all over the world. The ‘Swarovski Enlightened™ jewellery design competition', explored in this study, demonstrates the enormous potential of virtual co‐creation platforms. It further highlights the importance of the co‐creation experience and its impact on the quantity and quality of designs submitted. First, we introduce the idea of virtual co‐creation platforms and the requirements on the design of such a platform. Second, we explore the impact of the co‐creation experience on the content contributed by participants. Our study shows that co‐creation experience significantly impacts the number of contributions by consumers as well as the quality of submitted designs. Our paper contributes to a better theoretic understanding of the impact of a participant's perceived autonomous, enjoyable, and competent experience, as well as participants' perceived sense of community on their experience. From a managerial perspective, it provides guidance in designing successful idea and design competitions. While innovation managers may be interested in creative contributions, for participants, it is the experience which matters. Fully featured community platforms rather than single idea submission websites are required to attract creative users to submit their ideas and designs.},
annote = {. Design competition etc. not relevant},
author = {F{\"{u}}ller, Johann and Hutter, Katja and Faullant, Rita},
doi = {10.1111/j.1467-9310.2011.00640.x},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/F{\"{u}}ller, Hutter, Faullant - 2011 - Why co-creation experience matters Creative experience and its impact on the quantity and quality of.pdf:pdf},
isbn = {0033-6807},
issn = {00336807},
journal = {R and D Management},
number = {3},
pages = {259--273},
pmid = {60770798},
title = {{Why co-creation experience matters? Creative experience and its impact on the quantity and quality of creative contributions}},
url = {https://www.researchgate.net/publication/228130543},
volume = {41},
year = {2011}
}
@article{Ghobadi2016,
abstract = {While the literature offers several frameworks that explain barriers to knowledge sharing within software development teams, little is known about differ-ences in how team members perceive these barriers. Based on an in-depth multi-case study of four software projects, we investigate how project managers, devel-opers, testers and user representatives think about barriers to effective knowledge sharing in agile development. Adapting comparative causal mapping, we con-structed causal maps for each of the four roles and identified overlap and diver-gence in map constructs and causal linkages. The results indicate that despite certain similarities, the four roles differ in how they perceive and emphasize knowledge-sharing barriers. The project managers put primary emphasis on pro-ject setting barriers, while the primary concern of developers, testers and user rep-resentatives were project communication, project organization and team capabilities barriers, respectively. Integrating the four causal maps and the agile lit-erature, we propose a conceptual framework with seven types of knowledge-sharing barriers and 37 specific barriers. We argue that to bridge communication gaps and create shared understanding in software teams, it is critical to take the revealed concerns of different roles into account. We conclude by discussing our findings in relation to knowledge sharing in agile teams and software teams more generally.},
annote = {Explores differences of different roles},
author = {Ghobadi, Shahla and Mathiassen, Lars},
doi = {10.1111/isj.12053},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ghobadi, Mathiassen - 2016 - Perceived barriers to effective knowledge sharing in agile software teams.pdf:pdf},
isbn = {1365-2575},
issn = {13652575},
journal = {Information Systems Journal},
keywords = {Agile development,Agile teams,Comparative causal mapping,Knowledge sharing,Qualitative study,Software teams},
number = {2},
pages = {95--125},
title = {{Perceived barriers to effective knowledge sharing in agile software teams}},
volume = {26},
year = {2016}
}
@inproceedings{Gonzalez2011,
abstract = {An architecture for dynamic security monitoring and enforcement for client software running in virtualized environments is presented. Virtualization is heavily used in cloud computing in order to allow a proper trade-off between isolation and resource usage. In this new architecture, monitoring mechanisms check a set of policy-defined conditions at runtime in order to detect threats or anomalous behaviour. On the other hand, enforcement is achievable by using secure software execution methods that comply with the defined policies. The presented architecture allows for context adaptation of the defined policies by using a new event-sequence language. This renders the automatic policy runtime enforcement as a crucial component to achieve proper security in virtualized platforms for cloud computing.},
author = {Gonz{\'{a}}lez, Javier and Mu{\~{n}}oz, Antonio and Ma{\~{n}}a, Antonio},
booktitle = {Proceedings of IEEE International Symposium on High Assurance Systems Engineering},
doi = {10.1109/HASE.2011.65},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mu{\~{n}}oz, Ma{\~{n}}a, Gonz{\'{a}}lez - 2011 - Multi-layer Monitoring for Cloud Computing Actigraphic sleep assessment in children with sleep disorde.pdf:pdf},
isbn = {9780769546155},
issn = {15302059},
keywords = {Accounting,Cloud computing,Dynamic monitoring,Event-sequence language,Monitoring,Monitoring rules,Security,Virtualization},
pages = {291--298},
title = {{Multi-layer monitoring for cloud computing}},
url = {https://www.researchgate.net/publication/220885284},
year = {2011}
}
@article{Gupta2013,
abstract = {Agile software methodologies are preferred over traditional methods in a variety of industry projects. Pair programming is a key practice of Extreme Programming; an agile software development technique, in which two students/ programmers/ co-workers work together at one terminal. One, the writer, writes code while the other, the analyst, reviews each line of code as it is typed in. The two co-workers swap roles frequently. For the IT students who are the future IT professionals of a country, Pair Programming may be a good method of training, as they need to inculcate the necessary soft skills that are essential in software development besides the necessary technical background. Students need to learn how to work in a team, one of the key aspects of sustenance in an industry. This helps them to develop the art of communication and interaction. This indeed makes them progress towards the path of making themselves better IT managers. Experiencing team work i.e. working in tandem with team members is an essential preparation for professional software development. In this process of learning the Mentor plays a vital role. Mentor doesn't only guide the students towards the completion of the project or assignment but also helps the students in their mental conditioning. The objective of this paper is to give a comparative study of a few authors, where the challenges faced by the students and how Pair Programming or collaborative learning can benefit and pose threats to students are explored. [ABSTRACT FROM AUTHOR]},
annote = {Nothing new},
author = {Gupta, Supriya and Bhattacharya, Vandana and Singha, Madhumita},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gupta, Bhattacharya, Singha - 2013 - Pair Programming Potential Benefits and Threats.pdf:pdf},
issn = {22497277},
journal = {International Journal of Advanced Computer Research},
keywords = {AGILE software development,Agile Methods,COMPARATIVE studies,COMPUTER programming,COMPUTER software,INFORMATION technology,Unified modeling language,WORK -- Sociological aspects,learning,self-organizing team},
number = {1},
pages = {108--113},
title = {{Pair Programming "Potential Benefits and Threats"}},
volume = {3},
year = {2013}
}
@misc{Hannay2009,
abstract = {Several experiments on the effects of pair versus solo programming have been reported in the literature. We present a meta-analysis of these studies. The analysis shows a small significant positive overall effect of pair programming on quality, a medium significant positive overall effect on duration, and a medium significant negative overall effect on effort. However, between-study variance is significant, and there are signs of publication bias among published studies on pair programming. A more detailed examination of the evidence suggests that pair programming is faster than solo programming when programming task complexity is low and yields code solutions of higher quality when task complexity is high. The higher quality for complex tasks comes at a price of considerably greater effort, while the reduced completion time for the simpler tasks comes at a price of noticeably lower quality. We conclude that greater attention should be given to moderating factors on the effects of pair programming. {\textcopyright} 2009 Elsevier B.V. All rights reserved.},
author = {Hannay, Jo E and Dyb{\aa}, Tore and Arisholm, Erik and Sj{\o}berg, Dag I.K.},
booktitle = {Information and Software Technology},
doi = {10.1016/j.infsof.2009.02.001},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hannay et al. - 2009 - The effectiveness of pair programming A meta-analysis.pdf:pdf},
isbn = {0950-5849},
issn = {09505849},
keywords = {Evidence-based software engineering,Fixed effects,Meta-analysis,Pair programming,Random effects,Systematic review},
number = {7},
pages = {1110--1122},
title = {{The effectiveness of pair programming: A meta-analysis}},
volume = {51},
year = {2009}
}
@inproceedings{Hanssen2009,
abstract = {Software entropy is a phenomenon where repeated changes gradually degrade the structure of the system, making it hard to understand and maintain. This phenomenon imposes challenges for organizations that have moved to agile methods from other processes, despite agile's focus on adaptability and responsiveness to change. We have investigated this issue through an industrial case study, and reviewed the literature on addressing software entropy, focussing on the detection of ldquocode smellsrdquo and their treatment by refactoring. We found that in order to remain agile despite of software entropy, developers need better support for understanding, planning and testing the impact of changes. However, it is exactly work on refactoring decision support and task complexity analysis that is lacking in literature. Based on our findings, we discuss strategies for dealing with entropy in this context and present avenues for future research.},
annote = {Agile and maintenance, future stuff but quite oldish?

Concerns more about large projects. Relatively good stuff.},
author = {Hanssen, Geir K and Yamashita, Aiko Fallas and Conradi, Reidar and Moonen, Leon},
booktitle = {Proceedings of the 2009 IEEE International Conference on Software Maintenance},
doi = {10.1109/ICSM.2009.5306278},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Yamashita et al. - 2009 - Maintenance and Agile Development Challenges, Opportunities and Future Directions ASFSDF Meta Environment View.pdf:pdf},
isbn = {9781424448289},
issn = {1063-6773},
pages = {487--490},
pmid = {1423894},
publisher = {IEEE},
title = {{Maintenance and agile development: Challenges, opportunities and future directions}},
year = {2009}
}
@inproceedings{Hasan2011,
abstract = {Software Maintenance (SM) constitutes a critical function that enables organizations to continually leverage their IT capabilities. However a majority of the SM methodologies are geared toward large organizations. This is detrimental to small organizations (SO), for which SM remains an important function. This research contributes to the discipline by a) evaluating the appropriateness of existing SM methodologies for small organizations b) investigating the explicit needs of a small organization through a case based empirical study. The preliminary findings of the research indicate a lack of alignment of existing SM processes to the overall needs of the small organization. Also, the empirical investigation suggests that SM processes in small organizations are ad-hoc, resulting in a reliance on key actors for project success. Consequently, a taxonomy of the key actors is suggested and initial insights are provided about its implications on project success and important functions such as communication, collaboration and coordination.},
annote = {This is ebin, should read},
author = {Hasan, Raza and Chakraborty, Suranjan},
booktitle = {Proceedings of the America's Conference on Information Systems},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/18419326f82be6704b3645cc805f94c33101.pdf:pdf},
keywords = {Small organizations,case study,software maintenance},
title = {{Investigating Software Maintenance Challenges in Small Organizations}},
year = {2011}
}
@article{Hernantes2015,
abstract = {Zabbix},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Hernantes, Josune and Gallardo, Gorka and Serrano, Nicol{\'{a}}s},
doi = {10.1109/MS.2015.96},
eprint = {arXiv:1011.1669v3},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hernantes, Gallardo, Serrano - Unknown - IT Infrastructure-Monitoring Tools.pdf:pdf},
isbn = {9788578110796},
issn = {07407459},
journal = {IEEE Software},
keywords = {HP Operations Manager,Hyperic,IBM Tivoli,IT infrastructure,IT infrastructure-monitoring tools,ManageEngine OpManager,Nagios,SolarWinds,WhatsUp Gold,Zabbix,software development,software engineering},
number = {4},
pages = {88--93},
pmid = {25246403},
title = {{IT Infrastructure-Monitoring Tools}},
volume = {32},
year = {2015}
}
@article{Herranz2014,
author = {Herranz, Eduardo and Colomo-palacios, Ricardo and Colomo-palacios, Ricardo},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Yilmaz - Unknown - Gamification as a Disruptive Factor in Software Process Improvement Initiatives.pdf:pdf},
journal = {Journal of Universal Computer Science},
keywords = {265087717,and author profiles for,article in journal of,discussions,factor in software,gamification as a disruptive,http,june 2014,net,process improvement initiatives,publication,researchgate,stats,this publication at,universal computer science,www},
number = {6},
pages = {885--906},
title = {{Gamification as a Disruptive Factor in Software Process Improvement Initiatives Gamification as a Disruptive Factor in Software Process}},
volume = {20},
year = {2014}
}
@inproceedings{Hu2014,
abstract = {For complex and popular software, project teams could receive a large number of bug reports. It is often tedious and costly to manually assign these bug reports to developers who have the expertise to fix the bugs. Many bug triage techniques have been proposed to automate this process. In this paper , we describe our study on applying conventional bug triage techniques to projects of different sizes. We find that the effectiveness of a bug triage technique largely depends on the size of a project team (measured in terms of the number of developers). The conventional bug triage methods become less effective when the number of developers increases. To further improve the effectiveness of bug triage for large projects, we propose a novel recommendation method called BugFixer, which recommends developers for a new bug report based on historical bug-fix information. BugFixer constructs a Developer-Component-Bug (DCB) network, which models the relationship between developers and source code components, as well as the relationship between the components and their associated bugs. A DCB network captures the knowledge of "who fixed what, where". For a new bug report, BugFixer uses a DCB network to recommend to tri-ager a list of suitable developers who could fix this bug. We evaluate BugFixer on three large-scale open source projects and two smaller industrial projects. The experimental results show that the proposed method outperforms the existing methods for large projects and achieves comparable performance for small projects.},
author = {Hu, Hao and Zhang, Hongyu and Xuan, Jifeng and Sun, Weigang},
booktitle = {Proceedings of the 25th International Symposium on Software Reliability Engineering},
doi = {10.1109/ISSRE.2014.17},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hu et al. - 2014 - Effective Bug Triage based on Historical Bug-Fix Information.pdf:pdf},
isbn = {978-1-4799-6032-3},
issn = {1071-9458},
keywords = {000 bugs were reported,bug report assignment,bug reports is large,bug repository,bug triage,developer rec-,for eclipse project from,for example,more,oct,ommendation,than 333,when the number of},
pages = {122--132},
publisher = {IEEE},
title = {{Effective Bug Triage based on Historical Bug-Fix Information}},
year = {2014}
}
@article{Hummel2013,
abstract = {Agile systems development (SD) promotes a shift fromthe traditional, document-driven communication paradigmtowards more informal, face-to-face communication. Our current state of knowledge about the implementation of this changing communication paradigm in agile SD projects is fragmented because of the lack of an integrative lens across different studies.We provide an integrated view of the role of communication in agile SD by conducting a structured, systematic literature review.We find that despite its acknowledged importance, our knowledge of communication and agile SD is limited because hardly any studies open up the communication process. In consequence,we present several research gaps.},
annote = {Irrelevanttia },
author = {Hummel, Markus and Rosenkranz, Christoph and Holten, Roland},
doi = {10.1007/s12599-013-0282-4},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hummel, Rosenkranz, Holten - 2013 - The role of communication in agile systems development An analysis of the state of the art.pdf:pdf},
isbn = {1157601303760},
issn = {18670202},
journal = {Business and Information Systems Engineering},
keywords = {Agile systems development,Literature review,Organizational communication,Software engineering,State of the art},
number = {5},
pages = {343--355},
title = {{The role of communication in agile systems development: An analysis of the state of the art}},
url = {http://www.ise.wiwi.uni-frankfurt.de/},
volume = {5},
year = {2013}
}
@article{Ikeda2019,
abstract = {Contemporary software projects often utilize a README. md to share crucial information such as installation and usage examples related to their software. Furthermore, these files serve as an important source of updated and useful documentation for developers and prospective users of the software. Nonetheless, both novice and seasoned developers are sometimes unsure of what is required for a good README file. To understand the contents of README, we investigate the contents of 43,900 JavaScript packages. Results show that these packages contain common content themes (i.e., 'usage', 'install' and 'license'). Furthermore, we find that application-specific packages more frequently included content themes such as 'options', while library-based packages more frequently included other specific content themes (i.e., 'install' and 'license').},
author = {Ikeda, Shohei and Ihara, Akinori and {Gaikovina KULA}, Raula and Matsumoto, Kenichi},
doi = {10.1587/transinf.2018EDP7071},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ikeda et al. - 2019 - An Empirical Study of README contents for JavaScript Packages.pdf:pdf},
issn = {0916-8532},
journal = {IEICE TRANSACTIONS on Information and Systems},
keywords = {JavaScript packages,README,association rule mining,documentation},
number = {2},
pages = {280--288},
title = {{An Empirical Study of README contents for JavaScript Packages}},
volume = {102},
year = {2019}
}
@inproceedings{Ito2016,
abstract = {Every organization undergoes personnel changes that induce handover activities. Most business people are familiar with the concept of a handover. Issues with handovers became apparent in Japan in 2007 as many people from the Baby Boomer Generation retired simultaneously. Although effective handovers are crucial for seamless business operations during personnel changes, the preferable elements for an ideal handover are ambiguous and little research has been conducted. Our research focuses on anti-patterns, which identify the causes of an unsuccessful handover. Paradoxically, the handover anti-pattern allows preferable elements for handover to become clear. Herein we introduce three anti-patterns, which were elucidated from a workshop to collect information about unsuccessful handovers. Categories and Subject Descriptors •Social and professional topics → Project and people management •Software and its engineering → Maintaining software • Software and its engineering → Software verification and validation General Terms Anti-patterns, Design patterns, Project management},
author = {Ito, Kei and Washizaki, Hironori and Fukazawa, Yoshiaki},
booktitle = {Proceedings of the 5th Asian Conference on Pattern Languages Programs of Programs},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ito, Washizaki, Fukazawa - 2016 - Handover Anti-patterns.pdf:pdf},
keywords = {Anti-patterns,Handover,Maintaining software,Pattern Language,People Management},
title = {{Handover Anti-patterns}},
year = {2016}
}
@misc{Kagan,
annote = {},
author = {Kagan, Spenger},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - full-text.pdf:pdf},
title = {{The Structural Approach to Cooperative learning}}
}
@inproceedings{Kajko-Mattsson2009,
abstract = {Most of the agile methods mainly concentrate on the development phase. None of them however is explicitly dedicated to the evolution and maintenance domain. In this paper, we outline an agile evolution and maintenance process model and evaluate it within two Canadian software organizations. We do this by comparing current agile development process models to the industrial evolution and maintenance practice in order to find issues relevant for the evolution and maintenance domain. Our results show that some changes need be made in the current agile methods.},
annote = {Good stuff.
More solutions than challenges tho},
author = {Kajko-Mattsson, Mira and Nyfjord, Jaana},
booktitle = {Proceedings of the 42nd Annual Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.2009.21},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kajko-Mattsson, Nyfjord - 2009 - A Model of Agile Evolution and Maintenance Process.pdf:pdf},
isbn = {9780769534503},
issn = {1530-1605},
keywords = {A Model of Agile Evolution and Maintenance Process},
pages = {1--10},
title = {{A model of agile evolution and maintenance process}},
year = {2009}
}
@article{Karimzadeh2016,
abstract = {Investing in documenting your bioinformatics software well can increase its impact and save your time. To maximize the effectiveness of your documentation, we suggest following a few guidelines we propose here. We recommend providing multiple avenues for users to use your research software, including a navigable HTML interface with a quick start, useful help messages with detailed ex-planation, and thorough examples for each feature of your software. By following these guidelines, you can assure that your hard work maximally benefits yourself and others.},
annote = {ok readme stuff},
author = {Karimzadeh, Mehran and Hoffman, Michael M},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Karimzadeh, Hoffman - 2016 - Creating great documentation for bioinformatics software.pdf:pdf},
journal = {Briefings in Bioinformatics},
keywords = {documentation,software},
number = {4},
pages = {693--699},
title = {{Creating great documentation for bioinformatics software}},
volume = {19},
year = {2017}
}
@techreport{Kasunic2005,
author = {Kasunic, Mark},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kasunic - 2005 - Designing an Effective Survey DISTRIBUTION STATEMENT A Approved for Public Release Distribution Unlimited.pdf:pdf},
institution = {Carnegie-Mellon University Pittsburg Software Engineering Institution},
title = {{Designing an Effective Survey}},
year = {2005}
}
@inproceedings{Katic2009,
abstract = {Software design complexity is increased while software is developing and therefore a management of the design complexity is an important issue. In order to accomplish this task various methods have been developed so far. Some methods propose crucial places where the software might be too complex leaving redesign to be accomplished manually. Other methods try to automate the redesign process as much as possible. This paper presents main definitions and terms concerning software redesign, current research in this area and challenges that might be potential candidates for the further research.},
annote = {Redesign stuff, maybe not relevant

Melko . Redesign stuff},
author = {Katic, Marija and Fertalj, Kresimir},
booktitle = {Proceedings of the 4th International Conference on Information Technology},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kati - Unknown - Challenges and Discussion of Software Redesign.pdf:pdf},
keywords = {challenges,reengineering,refactoring,software redesign},
title = {{Challenges and Discussion of Software Redesign}},
year = {2009}
}
@inproceedings{Klotins2015,
abstract = {Background – Startup companies are becoming important suppliers of innovative and software intensive products. The failure rate among startups is high due to lack of resources, immaturity, multiple influences and dynamic technologies. However, software product engineering is the core activity in startups, therefore inadequacies in applied engineering practices might be a significant contributing factor for high failure rates. Aim – This study identifies and categorizes software engineering knowledge areas utilized in startups to map out the state-of-art, identifying gaps for further research. Method – We perform a systematic literature mapping study, applying snowball sampling to identify relevant primary studies. Results – We have identified 54 practices from 14 studies. Although 11 of 15 main knowledge areas from SWEBOK are covered, a large part of categories is not. Conclusions – Existing research does not provide reliable support for software engineering in any phase of a startup life cycle. Transfer of results to other startups is difficult due to low rigor in current studies.},
annote = {Startup practices
},
author = {Klotins, Eriks and Unterkalmsteiner, Michael and Gorschek, Tony},
booktitle = {Lecture Notes in Business Information Processing},
doi = {10.1007/978-3-319-19593-3_22},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Klotins, Unterkalmsteiner, Gorschek - 2015 - Software engineering knowledge areas in startup companies A mapping study.pdf:pdf},
isbn = {9783319195926},
issn = {18651348},
keywords = {Agile,Development of software intensive products,Engineering practice,Lean,Mapping,Small companies,Software engineering,Startup},
pages = {245--257},
title = {{Software engineering knowledge areas in startup companies: A mapping study}},
url = {https://www.researchgate.net/publication/280534202},
volume = {210},
year = {2015}
}
@inproceedings{Knippers2011,
abstract = {A literature study on software maintenance and agile development methods was used to reason about the relationship between them. First, factors influencing software maintenance were identified. Second, characteristics of agile development methods were extracted from the literature. Then, the obtained information is used to reason about the extent to which agile development methods support long-term maintainability. It was concluded that, apart from frequently changing requirements, agile development methods do not have a negative impact on the maintainability of a system. In fact, program complexity and defects are reduced. Keywords agile software development, software maintenance, software maintainability, agile development methods},
address = {Enschede},
annote = {Agile methods and maintainability stuff},
author = {Knippers, Dani{\"{e}}l},
booktitle = {Proceedings of the 15th Twente Student Conference on IT},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Knippers - 2011 - Agile Software Development and Maintainability.pdf:pdf},
publisher = {University of Twente, Faculty of Electrical Engineering, Mathematics and Computer Science},
title = {{Agile Software Development and Maintainability}},
year = {2011}
}
@techreport{Kunstar2009,
abstract = {Nowadays, the cost of software system is one of the most important factors for choice of certain system by customer. Recent trends in software and system development have revealed the asset of usage of the abstract models through the software life cycle's phases. Abstract models streamline and speed up not only development but suitable models can also improve maintenance process to be more effective and safe. Presented paper briefly analyses SysML, which supports development process of complex systems. Main part is oriented to new approach to model driven system development supporting SysML concept named System Development Unified Process (SDUP) extended by concept of Model-Driven Maintenance.},
annote = {SDUP process stuff, seems like enterprise stuff.

Seemingly },
author = {Kun{\v{s}}t{\'{a}}r, J{\'{a}}n and Adamu{\v{s}}{\v{c}}{\'{i}}nov{\'{a}}, Iveta and Havlice, Zden{\v{e}}k},
booktitle = {Acta Univ. Sapientiae, Informatica},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kun{\v{s}}t{\'{a}}r, Adamu{\v{s}}{\v{c}}{\'{i}}nov{\'{a}}, Havlice - 2009 - The use of development models for improvement of software maintenance.pdf:pdf},
pages = {45--52},
title = {{The use of development models for improvement of software maintenance}},
url = {https://pdfs.semanticscholar.org/b756/028d3842dcc6e9195fffbe2f0d13cf1692be.pdf},
volume = {1},
year = {2009}
}
@article{Larrucea2016,
abstract = {Software process improvement (SPI) offers obstacles and opportunities for very small entities (VSEs), which are organizations with 25 or fewer employees. To help with this, the International Organization for Standardization and the International Electrotechnical Commission jointly developed ISO/IEC 29110 as SPI guidelines for VSEs.},
author = {Larrucea, Xabier and O'Connor, Rory V. and Colomo-Palacios, Ricardo and Laporte, Claude Y},
doi = {10.1109/MS.2016.42},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Larrucea et al. - 2016 - IEEE Software MarchApril 2016-Voice of Evidence Pre-publication version Software Process Improvement in Very Sm.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
number = {2},
pages = {85--89},
title = {{Software process improvement in very small organizations}},
volume = {33},
year = {2016}
}
@article{Lee2016,
abstract = {Although numerous studies have discussed the importance of the relationship between knowledge management and software process improvement (SPI), a research gap still exists in relation to how the specific role of knowledge sharing influences successful SPI implementation. This study advances our knowledge by developing an innovative model for exploring the impact of knowledge sharing on SPI success, the impact of knowledge sharing in specific organizational cultures, and how the support of top management specifically influences the path to SPI success. To empirically test the model, this study adopts the statistical technique of partial least squares (PLS) to analyze 118 samples collected from SPI-certified Taiwanese organizations. The results suggest that clan-type organizational culture has a stronger association with knowledge sharing than hierarchy-type in the context of SPI success. SPI knowledge sharing is found to be a mediator of both clan culture and top management support in the context of SPI success. The findings also include the implication to improve our knowledge about how organizational culture and top management support drive effective knowledge sharing on the way to SPI success.},
author = {Lee, Jung Chieh and Shiue, Yih Chearng and Chen, Chung Yang},
doi = {10.1016/j.chb.2015.08.030},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lee, Shiue, Chen - 2016 - Examining the impacts of organizational culture and top management support of knowledge sharing on the success.pdf:pdf},
issn = {07475632},
journal = {Computers in Human Behavior},
keywords = {Knowledge sharing,Organizational culture,SPI success,Software process improvement (SPI),Top management support},
pages = {462--474},
title = {{Examining the impacts of organizational culture and top management support of knowledge sharing on the success of software process improvement}},
volume = {54},
year = {2016}
}
@inproceedings{Leitner2012,
abstract = {Monitoring of applications deployed to Infrastructure-as-a-Service clouds is still an open problem. In this paper, we discuss an approach based on the complex event processing paradigm, which allows application developers to specify and monitor high-level application performance metrics. We use the case of a Web 2.0 sentiment analysis application to illustrate the limitations we currently experience with regard to cloud monitoring, and show how our approach allows for more expressive definitions of monitored metrics. Furthermore, we indicate how the higher-level metrics produced by our approach can be used to increase application elasticity in an existing cloud middleware.},
annote = {},
author = {Leitner, Philipp and Inzinger, Christian and Hummer, Waldemar and Satzger, Benjamin and Dustdar, Schahram},
booktitle = {Proceedings - 2012 5th IEEE International Conference on Service-Oriented Computing and Applications, SOCA 2012},
doi = {10.1109/SOCA.2012.6449437},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Leitner et al. - 2014 - Application-level Performance Monitoring of Cloud Services based on the Complex Event Processing Paradigm Audit4.pdf:pdf},
isbn = {9781467347754},
issn = {03787753},
title = {{Application-level performance monitoring of cloud services based on the complex event processing paradigm}},
url = {http://aws.amazon.com/},
year = {2012}
}
@inproceedings{LeondelaBarra1997,
abstract = {Educational and enterprise managers agree that too many graduate engineers lack of teamwork and effective communication skills. The same deficiency can be observed regarding creative problem-solving strategies. In order to help students to overcome these weaknesses we have structured and developed two workshops to formulate and solve problems in a creative manner, at the level of first year engineering courses. In this paper we give a description of the different structure and functionality of both workshops. One of them was incorporated in the regular program of the first year Math course. The other one was offered to the best first year students (20) and it was run in the second academic term of the year. In both workshops we aimed at producing a "creative teaching-learning environment" by using cooperative learning techniques and divergent thinking methods. We have also developed a new assessment method to evaluate students' performance based on quality and originality of questions and proposed problems rather than on effectiveness and accuracy of routine answers. Finally, the marks obtained by the students showed that they developed more effective learning and creative problem-solving strategies when compared with similar students working under traditional schemes. A personal interview with each of the students also verified the previous statement.},
author = {{Le{\'{o}}n de la Barra}, Guillermo E and Barra, De and {Le{\'{o}}n de la Barra}, Mario B and Urbina, Ana M},
booktitle = {Proceedings of the 27th Annual Conference. Frontiers in Education: Teaching and Learning in an Era of Change},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Le{\'{o}}n De La Barra, Le{\'{o}}n De La Barra, Urbina - Unknown - Creative Problem Solving Workshops for Engineering Students.pdf:pdf},
isbn = {0780340868},
issn = {01905848},
pages = {1428--1430},
publisher = {IEEE},
title = {{Creative Problem Solving Workshops for Engineering Students}},
volume = {3},
year = {1997}
}
@book{Linaker2015,
author = {Lin{\aa}ker, Johan and Sulaman, Sardar Muhammad and Maiani de Mello, Rafael and H{\"{o}}st, Martin},
doi = {10.1016/j.physd.2006.09.040},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lin{\aa}ker, Johan Sulaman, Sardar Muhammad Maiani de Mello, Rafael H{\"{o}}st - 2015 - Guidelines for conducting surveys in software engineerin.pdf:pdf},
isbn = {0167-2789},
issn = {01672789},
keywords = {Adjoint method,Data assimilation,Method of Lagrange multipliers,Ocean circulation,State estimate},
publisher = {Lund University},
title = {{Guidelines for conducting surveys in software engineering v. 1.1}},
year = {2015}
}
@incollection{Lindsey2011,
abstract = {We proposed to frame the discussion of Knowledge Management (KM) strategies by six basic strategic dilemmas that challenge companies and managers. The six dilemmas are: Codification-Tacitness; Complementary-Destroying; Concealment Transparent; External Acquisition-Internal Development; Exploration-Exploitation; and Product-Process. Our research suggests that companies are using these dimensions even if they do not have an explicit KM strategy, in the context of their business strategies. The findings also suggest that companies use a sophisticated set of choices for each dimension. The framework of the KM strategic dilemmas was validated in two different types of environments: business, and Knowledge-Based Systems(KBS) life cycle contexts. Based on these dilemmas (C3EEP for short) we developed a framework for KM strategy that companies can use to guide their strategic decision making. The article will summarize the six dilemmas, present two illustrations of application, and future research opportunities will be identified. {\textcopyright} 2011, IGI Global.},
annote = {Could be interesting},
author = {Lindsey, Keith L.},
booktitle = {Encyclopedia of Knowledge Management},
doi = {10.4018/978-1-59904-931-1},
edition = {2.},
editor = {Schwartz, David G.},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lindsey - 2011 - Knowledge sharing barriers.pdf:pdf},
isbn = {9781599049311},
issn = {15352897},
pages = {499--506},
publisher = {Idea Group},
title = {{Knowledge sharing barriers}},
year = {2011}
}
@misc{Livy2017,
author = {Livy, Danielle},
title = {{15 ITSM ITIL Metrics for Incident {\&} Service Management Success}},
url = {https://blog.samanage.com/it-service-management/15-itsm-itil-metrics-for-tracking-incident-management-success/},
urldate = {2019-01-24},
year = {2017},
note = "Accessed 24.1.2019"
}
@incollection{Lui2010,
abstract = {Pair programming, two programmers collaborating on design, coding and testing, has been a controversial focus of interest as Agile Software Development continues to grow in popularity both among academics and practitioners. As a result of the many investigations into the effectiveness of pair programming in the last decade, many have come to realize that there are many hard-to-control factors in pair programming in particular and in empirical software engineering in general. Because of these factors, the results of many pair programming experiments are not easy to replicate and the relative productivity of pair and solo programming are still not fully understood. So far, it has been concluded by previous studies that pair programming productivity can vary, but few have shown how and why this is the case. In this chapter, we discuss a number of challenging factors in the adoption of pair programming and present an approach to deal with them. We discuss how different factors may affect our experimental outcomes and improve experiment design to reveal how and why pair programming can be made productive, at least, in controlled situations.},
annote = {More scientific approach to pair programming},
author = {Lui, Kim Man and Barnes, Kyle Atikus and Chan, Keith C.C.},
booktitle = {Agile Software Development},
chapter = {7},
doi = {10.1007/978-3-642-12575-1_7},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lui, Barnes, Chan - 2010 - Pair Programming Issues and Challenges.pdf:pdf},
isbn = {978-3-642-12575-1},
issn = {0899-3408},
pages = {143--163},
publisher = {Springer},
title = {{Pair Programming: Issues and Challenges}},
year = {2010}
}
@article{LUSCHER2008,
abstract = {As change becomes a constant in organizational life, middle managers charged with interpreting, communicating, and implementing change often struggle for meaning. To explore change and managerial sensemaking, we conducted action research at the Danish Lego Company. Although largely absent from mainstream journals, action research offers exceptional access to and support of organizational sensemaking. Through collaborative intervention and reflection, we sought to help managers make sense of issues surfaced by a major restructuring. Results transform paradox from a label to a lens, contributing a process for working through paradox and explicating three organizational change aspects--paradoxes of performing, belonging, and organizing. [ABSTRACT FROM AUTHOR]},
annote = {Organizational challenges during change process},
author = {L{\"{u}}scher, Lotte S and Lewis, Marianne W},
doi = {10.1103/PhysRevLett.108.187601},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/Clavis-Lotte{\_}Luscher-ORGANIZATIONAL{\_}CHANGE{\_}AND{\_}MANAGERIAL{\_}SENSEMAKING.pdf:pdf},
isbn = {1998-1929 (Print)$\backslash$r1998-1929 (Linking)},
issn = {00014273},
journal = {Academy of Management Journal},
keywords = {ACTION research,BUSINESS enterprises,CHANGE,COMMUNICATIONS research,DENMARK,LEGO toys,MANAGEMENT,MIDDLE managers,ORGANIZATIONAL structure,SENSEMAKING theory (Communication),SOCIAL action,SOCIAL science research},
number = {2},
pages = {221--240},
pmid = {58771771},
title = {{Organizational Change and Managerial Sensemaking: Working Through Paradox}},
volume = {51},
year = {2008}
}
@article{Lyman1987,
annote = {think pair share stuff},
author = {Lyman, Frank},
journal = {Maa-Cie Cooperative News},
number = {1},
pages = {1--2},
title = {{Think-Pair-Share: An expanding teaching technique}},
volume = {1},
year = {1987}
}
@article{Maguire2014,
abstract = {Incoming university students who have not previously studied computer programming often find it a challenging subject, leading to high failure rates. Research has suggested that the lack of a formalised structure for collaborative learning may be one of the factors responsible for students' negative impressions of computer science. In this study we investigated whether the use of pair programming in practical laboratories would facilitate peer learning and enhance students' confidence in their programming ability. Results showed that this intervention was generally well received, although the weaker programmers (as measured by prior exam grades) perceived it to be of more benefit than the stronger ones. Students who reported a lower initial level of enjoyment and confidence in programming were more likely to report learning from the paired intervention, though this did not necessarily lead to enhanced performance. The most frequently reported positive feature of pair programming was that it allowed students to meet more people in the class. Although there was no significant increase in final exam grades for male students, there was a significant increase for female students, suggesting this teaching strategy may have asymmetrical gender benefits. [ABSTRACT FROM AUTHOR]},
annote = {Pair programming emphasizes learning for weaker students. Not universally beneficial. Ok stuff},
author = {Maguire, Phil and Maguire, Rebecca and Hyland, Philip and Marshall, Patrick},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Maguire et al. - 2014 - Enhancing Collaborative Learning Using Pair Programming Who Benefits.pdf:pdf},
issn = {20093160},
journal = {AISHE-J: The All Ireland Journal of Teaching {\&} Learning in Higher Education},
keywords = {Collaborative learning -- Research,College freshmen,Computation laboratories,Computer science -- Study {\&} teaching},
number = {2},
pages = {1411--14125},
title = {{Enhancing Collaborative Learning Using Pair Programming: Who Benefits?}},
volume = {6},
year = {2014}
}
@article{Melo2013,
abstract = {Context: The management of software development productivity is a key issue in software organizations, where the major drivers are lower cost and shorter time-to-market. Agile methods, including Extreme Programming and Scrum, have evolved as "light" approaches that simplify the software development process, potentially leading to increased team productivity. However, little empirical research has examined which factors do have an impact on productivity and in what way, when using agile methods. Objective: Our objective is to provide a better understanding of the factors and mediators that impact agile team productivity. Method: We have conducted a multiple-case study for six months in three large Brazilian companies that have been using agile methods for over two years. We have focused on the main productivity factors perceived by team members through interviews, documentation from retrospectives, and non-participant observation. Results: We developed a novel conceptual framework, using thematic analysis to understand the possible mechanisms behind such productivity factors. Agile team management was found to be the most influential factor in achieving agile team productivity. At the intra-team level, the main productivity factors were team design (structure and work allocation) and member turnover. At the inter-team level, the main productivity factors were how well teams could be effectively coordinated by proper interfaces and other dependencies and avoiding delays in providing promised software to dependent teams. Conclusion: Teams should be aware of the influence and magnitude of turnover, which has been shown negative for agile team productivity. Team design choices remain an important factor impacting team productivity, even more pronounced on agile teams that rely on teamwork and people factors. The intra-team coordination processes must be adjusted to enable productive work by considering priorities and pace between teams. Finally, the revised conceptual framework for agile team productivity supports further tests through confirmatory studies.},
annote = {},
author = {Melo, Claudia De O and Kon, Fabio and Cruzes, Daniela S and Conradi, Reidar},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Melo et al. - Unknown - Interpretative Case Studies on Agile Team Productivity and Management.pdf:pdf},
journal = {Information and Software Technology},
keywords = {Agile software development,industrial case studies,team management,team productivity factors,thematic analysis},
number = {2},
pages = {p412--p427},
title = {{Interpretative case studies on agile team productivity and management: University of Liverpool Library}},
url = {www.idi.ntnu.no/{~}dcruzes http://eds.b.ebscohost.com.liverpool.idm.oclc.org/eds/detail/detail?vid=4{\&}sid=9d031bd6-d239-4a56-a980-c150c1f70e91{\%}40sessionmgr104{\&}bdata=JnNpdGU9ZWRzLWxpdmUmc2NvcGU9c2l0ZQ{\%}3D{\%}3D{\#}AN=000312759500015{\&}db=edswsc},
volume = {55},
year = {2013}
}
@article{Merriam2002,
author = {Merriam, Sharan B.},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - Introduction to Qualitative Research.pdf:pdf},
isbn = {9780787958954},
journal = {Qualitative Research in Practice: Examples for discussion and analysis},
pages = {3--17},
title = {{Introduction to Qualitative Research}},
year = {2002}
}
@article{Mishra2009a,
abstract = {Effective communication, collaboration, and coordination are important contributing factors in achiev- ing success in agile software development projects. The significance of the workplace environment and tools are immense in effective communication, collaboration, and coordination among people performing software development. In this article, we study how the workplace environment and the effective use of tools like whiteboards, status boards, and so forth for exchanging information improved communication, collaboration, and coordination without compromising the ability to do individual work by developers in a small-scale software development organization. Based on ex- perience and an extensive literature review of communication, collaboration, coordination, and the significance of these in the workplace environment, a survey questionnaire was developed to collect data and observe the effect of these in a small software development organization. Our study indi- cated appropriate workspace environment has a positive effect on communication, collaboration, and coordination in small organizations developing software using eXtreme Programming (XP)},
annote = {Physical work environment in XP},
archivePrefix = {arXiv},
arxivId = {15334406},
author = {Mishra, Deepti and Mishra, Alok},
doi = {10.1002/hfm.20164},
eprint = {15334406},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mishra, Mishra - 2009 - Effective Communication, Collaboration, and Coordination in eXtreme Programming Human-Centric Perspective in a S.pdf:pdf},
isbn = {1090-8471},
issn = {10908471},
journal = {Human Factors and Ergonomics In Manufacturing {\&} Service Industries},
number = {5},
pages = {438--456},
pmid = {24655651},
publisher = {Wiley Periodicals, Inc. Published online in Wiley InterScience},
title = {{Effective communication, collaboration, and coordination in eXtreme programming: Human-centric perspective in a small organization}},
volume = {19},
year = {2009}
}
@article{Mishra2009b,
abstract = {Majority of software development organizations all over the world are small and medium enterprises. These organizations have realized that it is crucial for their business to improve their processes and working methods but they are lacking knowledge and resources to do it. It has been observed that the successful implementation of SPI methodologies is generally not possible within the context of small and medium-sized software enterprises (SMEs) because they are not capable of bearing the cost of implementing these software process improvement programs. Further the proper implementation of software engineering techniques is difficult task for SMEs as they often operate on limited resources and with strict time constraints There are number of methodologies to address these issues. In this paper, various SPI methodologies for SMEs are discussed and compared. This will facilitate towards maturity of software process improvement in SMEs and also help in development of automation tools for SPIs in future.},
author = {Mishra, Deepti and Mishra, Alok},
doi = {10.2298/CSIS0901111M},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mishra - Unknown - Software Process Improvement in SMEs A Comparative View HiCure Project View project.pdf:pdf},
issn = {18200214},
journal = {Computer Science and Information Systems},
keywords = {SME,Small and medium enterprises,Software process improvement,Software quality},
number = {1},
pages = {111--140},
title = {{Software process improvement in SMEs: A comparative view}},
volume = {6},
year = {2009}
}
@techreport{Neamtiu2017,
abstract = {The fast evolution pace for cloud computing software is on a collision course with our growing reliance on cloud computing. On one hand, cloud software must have the agility to evolve rapidly, in order to remain competitive; on the other hand, more and more critical services become dependent on the cloud and demand high availability through firm Service Level Agreements (SLAs) for cloud infrastructures. This race between the needs to increase both the cloud upgrade frequency and the service availability is unsustainable. In this paper we highlight challenges and opportunities for upgrades in the cloud. We survey the release histories of several cloud applications to analyze their evolution pace, and we discuss the shortcomings with current cloud upgrade mechanisms. We outline several solutions for sustaining this evolution while improving availability, by focusing on the novel characteristics of cloud computing. By discussing several promising directions for realizing this vision, we propose a research agenda for the future of software upgrades in the cloud.},
annote = {Fast pace of cloud applications require tight SLAs and pose challenges. OK stuff, might be irrelevant
},
author = {Neamtiu, Iulian and Dumitras, Tudor},
booktitle = {Tim Bowyer},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Neamtiu, Dumitras - Unknown - Cloud Software Upgrades Challenges and Opportunities.pdf:pdf},
keywords = {cloud computing,software upgrades},
title = {{Cloud Software Upgrades: Challenges and Opportunities}},
url = {http://www.howjsay.com/?{\&}wid=1024{\&}flash=y},
year = {2017}
}
@misc{Nuxeo2017,
author = {Nuxeo},
booktitle = {nuxeo GitHub},
title = {{README.md}},
url = {https://github.com/nuxeo/nuxeo/blob/master/README.md},
urldate = {2019-02-16},
year = {2017}
}
@inproceedings{OConnor2012,
abstract = {The recently published ISO/IEC 29110 standard Lifecycle profiles for Very Small Entities has at its core a Management and Engineering Guide [1] which are targeted at very small entities (enterprises, organizations, departments or projects) having up to 25 people [2], to assist them unlock the potential benefits of using standards which are specifically designed to address their needs. This paper discusses the role and structure of Project Management in the emerging ISO/IEC 29110 standard Software Process Lifecycles for Very Small Entities as well as its practical implication. This paper will also focus on the design and development of project management support documentation and their associated usage in early trials of ISO/IEC 29110.},
annote = {Another ISO29110 standard article. This time about mgmt

},
author = {O'Connor, Rory V. and Laporte, Claude Y},
booktitle = {Communications in Computer and Information Science},
doi = {10.1007/978-3-642-31199-4_29},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/O'connor, Laporte - Unknown - Software Project Management in Very Small Entities with ISOIEC 29110.pdf:pdf},
isbn = {9783642311987},
issn = {18650929},
keywords = {ISO,ISO/IEC 29110,Project Management,Standards,VSE},
pages = {330--341},
title = {{Software project management in very small entities with ISO/IEC 29110}},
url = {https://ulir.ul.ie/bitstream/handle/10344/2749/O Connor{\_}2012{\_}software.pdf?sequence=2},
volume = {301 CCIS},
year = {2012}
}
@inproceedings{Offermann2009,
abstract = {Discussions about the body of knowledge of information systems, including the research domain, relevant perspectives and methods have been going on for a long time. Many researchers vote for a combination of research perspectives and their respective research methodologies; rigour and relevance as requirements in design science are generally accepted. What has been lacking is a formalisation of a detailed research process for design science that takes into account all requirements. We have developed such a research process, building on top of existing processes and findings from design research. The process combines qualitative and quantitative research and references well-known research methods. Publication possibilities and self-contained work packages are recommended. Case studies using the process are presented and discussed.},
archivePrefix = {arXiv},
arxivId = {9780201398298},
author = {Offermann, Philipp and Levina, Olga and Sch{\"{o}}nherr, Marten and Bub, Udo},
booktitle = {Proceedings of the 4th International Conference on Design Science Research in Information Systems and Technology},
doi = {10.1145/1555619.1555629},
eprint = {9780201398298},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Levina, Bub - 2009 - Outline of a design science research process Digital Platform for Energy and Mobility View project.pdf:pdf},
isbn = {9781605584089},
issn = {1350-1917},
pages = {1},
pmid = {5320475},
title = {{Outline of a design science research process}},
year = {2009}
}
@incollection{Osterweil2011,
abstract = {The ICSE 9 paper, "Software Processes are Software Too," suggests that software processes are themselves a form of software and that there are considerable benefits that will derive from basing a discipline of software pro- cess development on the more traditional discipline of application software development. This paper attempts to clarify some misconceptions about this original ICSE 9 suggestion and summarizes some research carried out over the past ten years that seems to confirm the origi- nal suggestion. The paper then goes on to map out some future research directions that seem indicated. The pa- per closes with some ruminations about the significance of the controversy that has continued to surround this work.},
annote = {Tight bond between software and software engineering process.},
author = {Osterweil, Leon J},
booktitle = {Software Process Improvement},
doi = {10.1109/9781118156667.ch12},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Osterweil - 1997 - Software Processes Are Software Too, Revisited An Invited Talk on the Most Influential Paper of ICSE 9.pdf:pdf},
isbn = {9781118156667},
issn = {0270-5257},
pages = {545--553},
publisher = {ACM},
title = {{Software processes are software too, revisited: An invited talk on the most influential paper of ICSE 9}},
year = {2011}
}
@article{Paschke2006,
abstract = {Effective SLAs are extremely important to assure business continuity, customer satisfaction and trust. The metrics used to measure and manage performance compliance to SLA commitments are the heart of a successful agreement and are a critical long term success factor. Lack of experience in the use and automation of performance metrics causes problems for many organizations as they attempt to formulate their SLA strategies and set the metrics needed to support those strategies. This paper contributes to a systematic categorization of SLA contents with a particular focus on SLA metrics. The intended goal is to support the design and implementation of automatable SLAs based on efficient metrics for automated monitoring and reporting. The categorization facilitates design decisions, analysis of existing SLAs and helps to identify responsibilities for critical IT processes in disruption management during the execution of SLAs.},
author = {Paschke, Adrian and Schnappinger-Gerull, Elisabeth},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Paschke, Schnappinger-Gerull - 2006 - A Categorization Scheme for SLA Metrics.pdf:pdf},
isbn = {3-88579-174-9},
issn = {18632351},
journal = {Service Oriented Electronic Commerce},
number = {14},
pages = {25--40},
title = {{A Categorization Scheme for SLA Metrics}},
volume = {80},
year = {2006}
}
@article{Peffers2007,
annote = {Design science stuff},
archivePrefix = {arXiv},
arxivId = {z0022},
author = {Peffers, Ken and Tuunanen, Tuure and Rothenberger, Marcus A. and Chatterjee, Samir},
doi = {28/5/914 [pii]},
eprint = {z0022},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Peffers et al. - Unknown - A Design Science Research Methodology for Information Systems Research.pdf:pdf},
isbn = {0195-6108 (Print)},
issn = {01956108},
journal = {Journal of Management Information Systems},
number = {3},
pages = {45--78},
pmid = {11372},
title = {{A Design Science Research Methodology for Information Systems Research}},
volume = {24},
year = {2007}
}
@article{Perez-Riverol2016,
abstract = {A "Ten Simple Rules" guide to git and GitHub. We describe and provide examples on how to use these software to track projects, as users, teams and organizations. We document collaborative development using branching and forking, interaction between collaborators using issues and continuous integration and automation using, for example, Travis CI and codevoc. We also describe dissemination and social aspects of GitHub such as GitHub pages, following and watching repositories, and give advice on how to make code citable.},
annote = {},
author = {Perez-Riverol, Yasset and Gatto, Laurent and Wang, Rui and Sachsenberg, Timo and Uszkoreit, Julian and Leprevost, Felipe da Veiga and Fufezan, Christian and Ternent, Tobias and Eglen, Stephen J. and Katz, Daniel S. and Pollard, Tom J. and Konovalov, Alexander and Flight, Robert M. and Blin, Kai and Vizca{\'{i}}no, Juan Antonio},
doi = {10.1371/journal.pcbi.1004947},
editor = {Markel, Scott},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/perez-riverol2016.pdf:pdf},
isbn = {15537358 (Electronic)},
issn = {15537358},
journal = {PLoS Computational Biology},
month = {jul},
number = {7},
pages = {e1004947},
pmid = {27415786},
title = {{Ten Simple Rules for Taking Advantage of Git and GitHub}},
url = {https://dx.plos.org/10.1371/journal.pcbi.1004947},
volume = {12},
year = {2016}
}
@article{Pino2010a,
abstract = {Context: Diagnosing processes in a small company requires process assessment practices which give qualitative and quantitative results; these should offer an overall view of the process capability. The purpose is to obtain relevant information about the running of processes, for use in their control and improvement. However, small organizations have some problems in running process assessment, due to their specific characteristics and limitations. Objective: This paper presents a methodology for assessing software processes which assist the activity of software process diagnosis in small organizations. There is an attempt to address issues such as the fact that: (i) process assessment is expensive and typically requires major company resources and (ii) many light assessment methods do not provide information that is detailed enough for diagnosing and improving processes. Method: To achieve all this, the METvalCOMPETISOFT assessment methodology was developed. This methodology: (i) incorporates the strategy of internal assessments known as rapid assessment, meaning that these assessments do not take up too much time or use an excessive quantity of resources, nor are they too rigorous and (ii) meets all the requirements described in the literature for an assessment proposal which is customized to the typical features of small companies. Results: This paper also describes the experience of the application of this methodology in eight small software organizations that took part in the COMPETISOFT project. The results obtained show that this approach allows us to obtain reliable information about the strengths and weaknesses of software processes, along with information to companies on opportunities for improvement. Conclusion: The assessment methodology proposed sets out the elements needed to assist with diagnosing the process in small organizations step-by-step while seeking to make its application economically feasible in terms of resources and time. From the initial application it may be seen that this assessment methodology can be useful, practical and suitable for diagnosing processes in this type of organizations. {\textcopyright} 2010 Elsevier B.V. All rights reserved.},
annote = {Measuring stuff in small organizations, could be interesting, but could also be quite specific and thus not applicable

},
author = {Pino, Francisco J and Pardo, C{\'{e}}sar and Garc{\'{i}}a, F{\'{e}}lix and Piattini, Mario},
doi = {10.1016/j.infsof.2010.04.004},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Pino et al. - 2010 - Assessment methodology for software process improvement in small organizations.pdf:pdf},
isbn = {09505849},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Assessment methodology,COMPETISOFT,SPI,Small software organizations,Software process assessment,Software process improvement},
number = {10},
pages = {1044--1061},
pmid = {23038565},
title = {{Assessment methodology for software process improvement in small organizations}},
url = {https://lms.ctl.cyut.edu.tw/sysdata/0/36200/doc/c3b138e810583ce3/attach/2160882.pdf},
volume = {52},
year = {2010}
}
@article{Pino2010,
abstract = {For software process improvement - SPI - there are few small organizations using models that guide the management and deployment of their improvement initiatives. This is largely because a lot of these models do not consider the special characteristics of small businesses, nor the appropriate strategies for deploying an SPI initiative in this type of organization. It should also be noted that the models which direct improvement implementation for small settings do not present an explicit process with which to organize and guide the internal work of the employees involved in the implementation of the improvement opportunities. In this paper we propose a lightweight process, which takes into account appropriate strategies for this type of organization. Our proposal, known as a "Lightweight process to incorporate improvements", uses the philosophy of the Scrum agile method, aiming to give detailed guidelines for supporting the management and performance of the incorporation of improvement opportunities within processes and their putting into practice in small companies. We have applied the proposed process in two small companies by means of the case study research method, and from the initial results, we have observed that it is indeed suitable for small businesses. {\textcopyright} 2010 Elsevier Inc. All rights reserved.},
annote = {Adopting process improvement in small organizations, could be beneficial later during the implementation phase

},
author = {Pino, Francisco J and Pedreira, Oscar and Garc{\'{i}}a, F{\'{e}}lix and Luaces, Miguel Rodr{\'{i}}guez and Piattini, Mario},
doi = {10.1016/j.jss.2010.03.077},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Pino et al. - 2010 - Using Scrum to guide the execution of software process improvement in small organizations.pdf:pdf},
isbn = {0164-1212},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Agile methods,Model to guide improvements,SPI,Scrum,Small software companies,Software process improvement},
number = {10},
pages = {1662--1677},
pmid = {28356110},
title = {{Using Scrum to guide the execution of software process improvement in small organizations}},
url = {http://www.cin.ufpe.br/{~}scls/Claudia/Papers - SPI/http{\_}{\_}{\_}www..pdf},
volume = {83},
year = {2010}
}
@inproceedings{Plonka2012,
abstract = {In this paper the concept of “lexical unit” as proposed by Cruse (1986) is introduced in the context of L2 vocabulary learning to replace the rather vague notion of “word.” In the first part of the paper, this concept is defined in terms of lexical semantics and then applied to the L2 learning task. The second part describes two experimental studies in which the learning of different types of lexical units is examined. In the first study, totally new lexical units are compared with multiword items that are made up of familiar forms. In the second experiment, different types of new senses of familiar forms are compared. Both studies underscore the importance of knowledge of form—but not of previously learned meaning—for the learning of new meanings for familiar forms.},
annote = {Disengagement reasons and solutions},
author = {Plonka, Laura and Sharp, Helen and {Van Der Linden}, Janet},
booktitle = {Proceedings of the 34th International Conference on Software Engineering},
doi = {10.1109/ICSE.2012.6227166},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Plonka, Sharp, Van Der Linden - Unknown - Disengagement in Pair Programming Does It Matter.pdf:pdf},
isbn = {9781467310673},
issn = {02705257},
keywords = {agile software development,collaboration,empirical study},
pages = {496--506},
title = {{Disengagement in pair programming: Does it matter?}},
year = {2012}
}
@article{Plonka2015,
abstract = {Whilst knowledge transfer is one of the most widely-claimed benefits of pair programming, little is known about how knowledge transfer is achieved in this setting. This is particularly pertinent for novice-expert constellations, but knowledge transfer takes place to some degree in all constellations. We ask "what does it take to be a good "expert" and how can a "novice" best learn from a more experienced developer?". An in-depth investigation of video and audio excerpts of professional pair programming sessions using Interaction Analysis reveals: six teaching strategies, ranging from "giving direct instructions" to "subtle hints"; and challenges and benefits for both partners. These strategies are instantiations of some but not all teaching methods promoted in cognitive apprenticeship; novice articulation, reflection and exploration are not seen in the data. The context of pair programming influences the strategies, challenges and benefits, in particular the roles of driver and navigator and agile prioritisation which considers business value rather than educational progression. Utilising these strategies more widely and recognizing the challenges and benefits for both partners will help developers to maximise the benefits from pairing sessions.},
annote = {Novice learning vs. expert teaching. Some good strategies},
author = {Plonka, Laura and Sharp, Helen and {Van Der Linden}, Janet and Dittrich, Yvonne},
doi = {10.1016/j.ijhcs.2014.09.001},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Plonka et al. - 2015 - Knowledge transfer in pair programming An in-depth analysis.pdf:pdf},
isbn = {1480727946},
issn = {10959300},
journal = {International Journal of Human Computer Studies},
keywords = {Cognitive apprenticeship,Interaction analysis,Knowledge transfer,Pair programming,Qualitative analysis},
number = {1},
pages = {66--78},
title = {{Knowledge transfer in pair programming: An in-depth analysis}},
volume = {73},
year = {2015}
}
@misc{Prana2018,
abstract = {README files play an essential role in shaping a developer's first impression of a software repository and in documenting the software project that the repository hosts. Yet, we lack a systematic understanding of the content of a typical README file as well as tools that can process these files automatically. To close this gap, we conduct a qualitative study involving the manual annotation of 4,226 README file sections from 393 randomly sampled GitHub repositories and we design and evaluate a classifier and a set of features that can categorize these sections automatically. We find that information discussing the `What' and `How' of a repository is very common, while many README files lack information regarding the purpose and status of a repository. Our multi-label classifier which can predict eight different categories achieves an F1 score of 0.746. To evaluate the usefulness of the classification, we used the automatically determined classes to label sections in GitHub README files using badges and showed files with and without these badges to twenty software professionals. The majority of participants perceived the automated labeling of sections based on our classifier to ease information discovery. This work enables the owners of software repositories to improve the quality of their documentation and it has the potential to make it easier for the software development community to discover relevant information in GitHub README files.},
archivePrefix = {arXiv},
arxivId = {1802.06997},
author = {Prana, Gede Artha Azriadi and Treude, Christoph and Thung, Ferdian and Atapattu, Thushari and Lo, David},
booktitle = {Empirical Software Engineering},
doi = {10.1007/s10664-018-9660-3},
eprint = {1802.06997},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Artha et al. - 2018 - Categorizing the Content of GitHub README Files.pdf:pdf},
isbn = {1066401896603},
issn = {15737616},
keywords = {Classification,Documentation,GitHub README files},
pages = {1--32},
title = {{Categorizing the Content of GitHub README Files}},
year = {2018}
}
@incollection{Prochazka2011,
abstract = {A number of recent surveys of Web development have revealed that typical project timeframes are of the order of 3 months. This chapter reports the findings of a field study conducted in Ireland which set out to contribute towards a better understanding of the nature of high-speed Web development practices. Qualitative interview data was gathered from 14 interviewees, purposefully selected from a variety of different organisations and backgrounds. This data was then analysed using the Grounded Theory method, and ten core dimensions were revealed: (1) the role of collaborative groupware tools; (2) collective code ownership; (3) timeframe driven by business imperatives; (4) enablers of productivity; (5) quality "satisficing"; (6) requirements clarity; (7) process maturity; (8) collectively agreed project schedules; (9) closeness to client; and (10) working software over documentation. {\textcopyright} Springer Science+Business Media, LLC 2011.},
address = {New York},
annote = {},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Prochazka, Jaroslavl},
booktitle = {Information Systems Development},
doi = {10.1007/978-1-349-21555-3_10},
eprint = {arXiv:1011.1669v3},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/maintenance.pdf:pdf},
isbn = {978-0-387-84809-9},
issn = {13501917},
pages = {597--609},
pmid = {26593423},
publisher = {Springer},
title = {{Agile support and Maintenance of IT services}},
url = {http://link.springer.com/10.1007/978-1-349-21555-3{\_}10},
year = {2011}
}
@inproceedings{Punter2003,
abstract = {One purpose of empirical software engineering is to enable an understanding of factors that influence software development. Surveys are an appropriate empirical strategy to gather data from a large population (e.g., about methods, tools, developers, companies) and to achieve an understanding of that population. Although surveys are quite often performed, for example, in social sciences and marketing research, they are underrepresented in empirical software engineering research, which most often uses controlled experiments and case studies. Consequently, also the methodological support how to perform such studies in software engineering, is rather low. However, with the increasing pervasion of the internet it is possible to perform surveys easily and cost-effectively over internet pages (i.e., on-line), while at the same time the interest in performing surveys is growing. The purpose of this paper is twofold. First we want to arise the awareness of on-line surveys and discuss methods how to perform these in the context of software engineering. Second, we report our experience in performing on-line surveys in the form of lessons learned and guidelines.},
annote = {General survey stuff, oldish but ok},
author = {Punter, Teade and Ciolkowski, Marcus and Freimut, Bernd and John, Isabel},
booktitle = {Proceedings of the International Symposium on Empirical Software Engineering},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Punter et al. - 2003 - Conducting On-line Surveys in Software Engineering.pdf:pdf},
isbn = {0769520022},
pages = {80--88},
publisher = {IEEE},
title = {{Conducting On-line Surveys in Software Engineering}},
year = {2003}
}
@inproceedings{Rautiainen2011,
abstract = {This paper is a descriptive case study of how one department at Paf, Paf.com, introduced portfolio management to help support scaling agile software development. Paf.com had experienced problems with long time-to-market due to thrashing, which was caused by frequently changing priorities due to an ad-hoc prioritization process and handovers. Also, there was lack of visibility into projects entering and progressing in the development pipeline. No structured way of starting projects was enforced company-wide, and too many parallel projects got started. As a result of introducing a structured portfolio management process, the number of ongoing projects has dramatically reduced, from over 200 to 30, reducing thrashing. Listing all projects in priority order in the Paf.com backlog provides visibility into what is currently ongoing, helping coordinate the work of multiple Scrum teams. The portfolio follow-up function provides progress data on the projects, helping managers make more informed decisions, considering the whole portfolio.},
annote = {Good stuff on portfolio management if considered necessary

},
author = {Rautiainen, Kristian and {Von Schantz}, Joachim and V{\"{a}}h{\"{a}}niitty, Jarno},
booktitle = {Proceedings of the Annual Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.2011.390},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rautiainen et al. - 2011 - Supporting Scaling Agile with Portfolio Management Case Paf.com.pdf:pdf},
isbn = {9780769542829},
issn = {15301605},
title = {{Supporting scaling agile with portfolio management: Case Paf.com}},
year = {2011}
}
@article{Riaz2016,
abstract = {This paper presents the results of a systematic review conducted to collect evidence on software maintainability prediction and metrics. The study was targeted at the software quality attribute of maintainability as opposed to the process of software maintenance. The evidence was gathered from the selected studies against a set of meaningful and focused questions. 710 studies were initially retrieved; however of these only 15 studies were selected; their quality was assessed; data extraction was performed; and data was synthesized against the research questions. Our results suggest that there is little evidence on the effectiveness of software maintainability prediction techniques and models.},
annote = {Maintainability measuring
},
author = {Riaz, Mehwish and Mendes, Emilia and Tempero, Ewan},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Riaz, Mendes, Tempero - 2016 - A Systematic Review of Software Maintainability Prediction and Metrics.pdf:pdf},
isbn = {9781424448418},
journal = {Third International Symposium on Empirical Software Engineering and Measurement},
number = {1},
pages = {217--219},
title = {{A Systematic Review of Software Maintainability Prediction and Metrics}},
url = {https://www.rose-hulman.edu/class/csse/csse575/Resources/maintainabilityMeas05314233.pdf},
volume = {3},
year = {2016}
}
@techreport{Ribaud2010,
abstract = {The emerging ISO/IEC 29110 standard Lifecycle profiles for Very Small Entities has at its core a Management and Engineering Guides which is targeted at very small entity (enterprise, organization, department or project) having up to 25 people, to assist them unlock the potential benefits of using standards which are specifically designed to address there needs. The developers of the standard, ISO/IEC JCT1/SC7 Working Group 24 (WG24), recommend the use of pilot projects as a mean to trial the adoption of the new International standard in small organisations. Accordingly an ISO/IEC 29110 pilot project has been established between the Software Engineering group of Brest University and a 14 person company with the aim of establishing an engineering discipline for a new web-based project. This paper details the lessons learned from the pilot project and based on our experiences with using ISO/IEC 29110 we identify a potential deficiency and accordingly propose new process area, "Infrastructure and Support" for include in the future evolution of ISO/IEC 29110 Process Profiles.},
annote = {Interesting set about small organizations. Application of ISO29110 standard I guess

.},
author = {Ribaud, V and Saliou, P and O'connor, R V and Laporte, C Y},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ribaud et al. - 2010 - Software Engineering Support Activities for Very Small Entities.pdf:pdf},
keywords = {ISO/IEC 29110,Very small entities,software engineering processes,support activities},
pages = {165--176},
publisher = {Springer-Verlag},
title = {{Software Engineering Support Activities for Very Small Entities}},
url = {https://ulir.ul.ie/bitstream/handle/10344/726/2010-OConnor-Software-au.pdf?sequence=2},
volume = {99},
year = {2010}
}
@article{Richardson2007,
abstract = {Small software organizations - independently financed and organized companies with fewer than 50 employees - are fundamental to many national economies' growth. In the US, Brazil, Canada, China, India, Finland, Ireland, Hungary, and many other countries, small companies represent up to 85 percent of all software organizations. However, to persist and grow, small software companies need efficient, effective software engineering solutions. People often believe that good practices and solutions are expensive, time consuming, and targeted more toward large organizations, and therefore difficult to apply in small companies. Considering the large percentage of small software organizations across the globe, relatively few publications present software engineering solutions focusing specifically on small software companies. In this special issue, we hope to address this gap. Considering their typical characteristics and limitations, how can small organizations apply software engineering methods, techniques, best practices, and tools to improve software quality and productivity without introducing unacceptable overhead?},
annote = {Good stuff},
author = {Richardson, Ita and von Wangenheim, Christiane Gresse},
doi = {10.1109/MS.2007.12},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - 8 I E E E S O F T W A R E P u b l i s.pdf:pdf},
isbn = {07407459},
issn = {07407459},
journal = {IEEE Software},
keywords = {Best practices,Small software organizations,Software tools and environments,Version control},
number = {1},
pages = {18--22},
title = {{Why are small software organizations different?}},
volume = {24},
year = {2007}
}
@misc{Riege2005,
abstract = {Purpose – Knowledge sharing is the corner-stone of many organisations' knowledge-management (KM) strategy. Despite the growing significance of knowledge sharing's practices for organisations' competitiveness and market performance, several barriers make it difficult for KM to achieve the goals and deliver a positive return on investment. This paper provides a detailed review of current KM and related literatures on a large number of possible knowledge-sharing barriers with the purpose of offering a more comprehensive and structured starting-point for senior managers when auditing their organisation's current knowledge base and knowledge-sharing requirements. Design/methodology/approach – This article reviews and discusses over three dozen potential knowledge-sharing barriers, categorising them into three main domains of recently published works: individual/personal, organisational, and technological barriers. Findings – The extensive list of knowledge sharing barriers provides a helpful starting point and guideline for senior managers auditing their existing practices with a view to identifying any bottle-necks and improving on the overall effectiveness of knowledge-sharing activities. Practical implications – Managers need to realise, however, that a particular knowledge sharing strategy or specific managerial actions will not suit all companies and that there are differences to be expected between MNCs and SMEs, private, public sector, and not-for-profit organisations. As such, the implementation of knowledge-sharing goals and strategies into an organisation's strategic planning and thinking will vary greatly. Originality/value – The main discussion of this paper brings together a large range of knowledge- sharing barriers in an attempt to indicate the complexity of knowledge sharing as a value-creating organisational activity.},
archivePrefix = {arXiv},
arxivId = {1},
author = {Riege, Andreas},
booktitle = {Journal of Knowledge Management},
doi = {10.1108/13673270510602746},
eprint = {1},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Riege - 2005 - Three-dozen knowledge-sharing barriers managers must consider.pdf:pdf},
isbn = {1367-3270},
issn = {13673270},
keywords = {Knowledge management,Management strategy},
number = {3},
pages = {18--35},
pmid = {230315162},
title = {{Three-dozen knowledge-sharing barriers managers must consider}},
volume = {9},
year = {2005}
}
@article{Robinson2007,
abstract = {Over the past decade we have performed a sustained series of qualitative studies of software development practice, focusing on social factors. Using an ethnographically-informed approach, we have addressed four areas of software practice: software quality management systems, the emergence of object technology, professional end user development and agile development. Several issues have arisen from this experience, including the nature of research questions that such studies can address, the advantages and challenges associated with being a member of the community under study, and how to maintain rigour in data collection. In this paper, we will draw on our studies to illustrate our approach and to discuss these and other issues. {\textcopyright} 2007 Elsevier B.V. All rights reserved.},
author = {Robinson, Hugh and Segal, Judith and Sharp, Helen},
doi = {10.1016/j.infsof.2007.02.007},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/robinson2007.pdf:pdf},
isbn = {0950-5849},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Field studies,Qualitative analysis,Software practice},
month = {jun},
number = {6},
pages = {540--551},
pmid = {14570710},
title = {{Ethnographically-informed empirical studies of software practice}},
volume = {49},
year = {2007}
}
@techreport{Ruefle2013,
author = {Ruefle, Robin and Wyk, Ken Van and Tosic, Lana},
booktitle = {New Zealand National Cyber Security Centre Government Communication Security Bureau, Developed in cooperation with the CERT Division of the Software Engineering Institute at Carnegie Mellon University},
doi = {10.1016/j.mseb.2017.11.017},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ruefle, Van Wyk, Tosic - 2013 - New Zealand Security Incident Management Guide for Computer Security Incident Response Teams (CSIRTs) N.pdf:pdf},
issn = {09215107},
number = {May},
title = {{New Zealand Security Incident Management Guide for Computer Security Incident Response Teams (CSIRTs)}},
year = {2013}
}
@article{Runeson2009,
abstract = {Case study is a suitable research methodology for software engineering research since it studies contemporary phenomena in its natural context. However, the understanding of what constitutes a case study varies, and hence the quality of the resulting studies. This paper aims at providing an introduction to case study methodology and guidelines for researchers conducting case studies and readers studying reports of such studies. The content is based on the authors' own experience from conducting and reading case studies. The terminology and guidelines are compiled from different methodology handbooks in other research domains, in particular social science and information systems, and adapted to the needs in software engineering. We present recommended practices for software engineering case studies as well as empirically derived and evaluated checklists for researchers and readers of case study research.},
annote = {Survey + case study guidelines, should be good stuff


Good checklist},
archivePrefix = {arXiv},
arxivId = {arXiv:gr-qc/9809069v1},
author = {Runeson, Per and H{\"{o}}st, Martin},
doi = {10.1007/s10664-008-9102-8},
eprint = {9809069v1},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Runeson, H{\"{o}}st - 2009 - Guidelines for conducting and reporting case study research in software engineering.pdf:pdf},
isbn = {1382325615737616},
issn = {13823256},
journal = {Empirical Software Engineering},
keywords = {Case study,Checklists,Guidelines,Research methodology},
number = {2},
pages = {131--164},
pmid = {28843849},
primaryClass = {arXiv:gr-qc},
title = {{Guidelines for conducting and reporting case study research in software engineering}},
volume = {14},
year = {2009}
}
@book{Runeson2012,
abstract = {Based on their own experiences of in-depth case studies of software projects in international corporations, in this book the authors present detailed practical guidelines on the preparation, conduct, design and reporting of case studies of software engineering. This is the first software engineering specific book on the case study research method.},
address = {Hoboken},
annote = {General case study stuff, will be useful for general picture},
author = {Runeson, Per and H{\"{o}}st, Martin and Rainer, Austen and Regnell, Bj{\"{o}}rn},
doi = {10.1002/9781118181034},
edition = {1.},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Runeson et al. - 2012 - Case Study Research in Software Engineering.pdf:pdf},
isbn = {9781118181034},
keywords = {IT eBooks},
publisher = {Wiley},
title = {{Case Study Research in Software Engineering}},
year = {2012}
}
@article{Ryan2009,
abstract = {In this paper we operationally define and measure tacit knowledge at the team-level in the software development domain. Through a series of three empirical studies we developed and validated the team tacit knowledge measure (TTKM) for software developers. In the first study, initial scale items were developed using the repertory grid technique and content analysis. In Study 2, supplied repertory grids were administered to novices and experts to establish differential items, and Study 3 validated the TTKM on a sample of 48 industrial software development teams. In developing the TTKM we explored the relationships between tacit knowledge, explicit job knowledge and social interaction and their effect on team performance as measured by efficiency and effectiveness. In addition we assess the implications for managing software development teams and increasing team performance through social interaction. {\textcopyright} 2008 Elsevier Inc. All rights reserved.},
annote = {Extension of individual level tacit knowledge to team level, could be maybe interesting},
archivePrefix = {arXiv},
arxivId = {1507.06873},
author = {Ryan, Sharon and O'Connor, Rory V.},
doi = {10.1016/j.jss.2008.05.037},
eprint = {1507.06873},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ryan, O'connor - Unknown - Development of a Team Measure for Tacit Knowledge in Software Development Teams.pdf:pdf},
isbn = {0164-1212},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Agile methods,Knowledge,Repertory grid,Tacit knowledge,Team management,Team performance,Team tacit knowledge},
number = {2},
pages = {229--240},
pmid = {67195556},
title = {{Development of a team measure for tacit knowledge in software development teams}},
volume = {82},
year = {2009}
}
@article{Ryan2013,
annote = {Transactive memory stuff
Some other good stuff as well},
author = {Ryan, Sharon and O'Connor, Rory V.},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ryan, Connor - 2013 - Acquiring and Sharing Tacit Knowledge in Software Development Teams An Empirical Study.pdf:pdf},
journal = {Information and Software Technology},
keywords = {Agile teams,Social interaction,Tacit knowledge,Team performance,Transactive memory},
number = {9},
pages = {1614--1624},
title = {{Acquiring and Sharing Tacit Knowledge in Software Development Teams: An Empirical Study}},
volume = {55},
year = {2013}
}
@article{Sanchez-Gordon2016,
abstract = {This paper reports on a grounded theory to study into software developers' use of software development processes in actual practice in the specific context of very small companies. This study was conducted in three very small software product companies located in Ecuador. The data collection was based on semi-structured qualitative interviews with software project managers, focus group with software developers and was supplemented by the literature and document studies. We interviewed two types of participants (managers and developers), so as to ensure that we elicited a holistic perspective of how they approached the software development process in actual practice. The goal was to study what practices are actually used and their opinion and attitude toward the potential adopting of an international standard (ISO/IEC 29110) specifically designed for very small companies. With the collected data, we performed an analysis utilizing grounded theory coding techniques, as this methodology promotes the focus on uncovering the real concerns of the participants. This study highlighted three areas of concern: customer, software product and development tasks coordination and tracking. The findings in this study give an insight toward the work products as they relate to software development process practices in very small companies and the important factors that must be considered to assist project success.},
annote = {Case example from Ecuador, not generalizable, but ok example. Example that standards might not work well},
author = {S{\'{a}}nchez-Gord{\'{o}}n, Mary Luz and O'Connor, Rory V.},
doi = {10.1007/s11219-015-9282-6},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/S{\'{a}}nchez-Gord{\'{o}}n, O'Connor - 2016 - Understanding the gap between software process practices and actual practice in very small compani.pdf:pdf},
isbn = {978-1-4471-6592-7},
issn = {15731367},
journal = {Software Quality Journal},
keywords = {Grounded theory,SPI,Software process,Software process improvement,VSE,Very small entity},
number = {3},
pages = {549--570},
title = {{Understanding the gap between software process practices and actual practice in very small companies}},
volume = {24},
year = {2016}
}
@misc{Sarrafieh2017,
author = {Sarrafieh, Rouzbeh},
booktitle = {Github gist},
title = {{Pair programming}},
url = {https://gist.github.com/rouzbeh84/4bafc9fe4fe02edf506d11997c4674b0},
urldate = {2019-03-09},
year = {2017},
note = "Accessed 9.3.2019"
}
@inproceedings{Shao2010,
abstract = {Monitoring plays a significant role in improving the quality of service in cloud computing. It helps clouds to scale resource utilization adaptively, to identify defects in services for service developers, and to discover usage patterns of numerous end users. However, due to the heterogeneity of components in clouds and the complexity arising from the wealth of runtime information, monitoring in clouds faces many new challenges. In this paper, we propose a runtime model for cloud monitoring (RMCM), which denotes an intuitive representation of a running cloud by focusing on common monitoring concerns. Raw monitoring data gathered by multiple monitoring techniques are organized by RMCM to present a more intuitive profile of a running cloud. We applied RMCM in the implementation of a flexible monitoring framework, which can achieve a balance between runtime overhead and monitoring capability via adaptive management of monitoring facilities. Our experience of utilizing the monitoring framework on a real cloud demonstrates the feasibility and effectiveness of our approach.},
author = {Shao, Jin and Wei, Hao and Wang, Qianxiang and Mei, Hong},
booktitle = {Proceedings of the 3rd International Conference on Cloud Computing},
doi = {10.1109/CLOUD.2010.31},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mei et al. - 2010 - A Runtime Model Based Monitoring Approach for Cloud IEEE Internet Computing editorial board View project Mobile Data.pdf:pdf},
isbn = {9780769541303},
issn = {2159-6182},
keywords = {Cloud,Monitoring,Runtime model},
pages = {313--320},
pmid = {1653278},
publisher = {IEEE},
title = {{A runtime model based monitoring approach for cloud}},
year = {2010}
}
@article{Sillitti2011,
author = {Sillitti, Alberto and Succi, Giancarlo and Fronza, Ilenia and Vlasenko, Jelena},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sillitti, Succi - 2011 - Does Pair Programming Increase Developers Attention.pdf:pdf},
isbn = {9781450304436},
journal = {Industrial Track of ESEC/FSE2011, Szeged, Hungary},
title = {{Does Pair Programming Increase Developers Attention?}},
year = {2011}
}
@inproceedings{Sjoberg2002,
abstract = {An important goal of most empirical software engineering research is the transfer of research results to industrial applications. Two important obstacles for this transfer are the lack of control of variables of case studies, i.e., the lack of explanatory power, and the lack of realism of controlled experiments. While it may be difficult to increase the explanatory power of case studies, there is a large potential for increasing the realism of controlled software engineering experiments. To convince industry about the validity and applicability of the experimental results, the tasks, subjects and the environments of the experiments should be as realistic as practically possible. Such experiments are, however, more expensive than experiments involving students, small tasks and pen-and-paper environments. Consequently, a change towards more realistic experiments requires a change in the amount of resources spent on software engineering experiments. This paper argues that software engineering researchers should apply for resources enabling expensive and realistic software engineering experiments similar to how other researchers apply for resources for expensive software and hardware that are necessary for their research. The paper describes experiences from recent experiments that varied in size from involving one software professional for 5 days to 130 software professionals, from 9 consultancy companies, for one day each.},
annote = {Irrelevanttia },
author = {Sj{\o}berg, D. I.K. and Anda, Bente and Arisholm, Erik and Dyb{\aa}, Tore and J{\o}rgensen, Magne and Karahasanovic, Amela and Koren, Espen F and Vok{\'{a}}c, Marek},
booktitle = {ISESE 2002 - Proceedings, 2002 International Symposium on Empirical Software Engineering},
doi = {10.1109/ISESE.2002.1166921},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sj{\o}berg et al. - 2002 - Conducting realistic experiments in software engineering.pdf:pdf},
isbn = {076951796X},
issn = {1306-696X (Print)},
keywords = {Empirical software engineering,experiments,professionals,technology transfer},
pages = {17--26},
pmid = {22792830},
title = {{Conducting realistic experiments in software engineering}},
url = {http://www.ifi.uio.no/forskning/grupper/isu/forskerbasen.},
year = {2002}
}
@inproceedings{Sjøberg2012,
abstract = {Context: Many metrics are used in software engineering research as surrogates for maintainability of software systems. Aim: Our aim was to investigate whether such metrics are consistent among themselves and the extent to which they predict maintenance effort at the entire system level. Method: The Maintainability Index, a set of structural measures, two code smells (Feature Envy and God Class) and size were applied to a set of four functionally equivalent systems. The metrics were compared with each other and with the outcome of a study in which six developers were hired to perform three maintenance tasks on the same systems. Results: The metrics were not mutually consistent. Only system size and low cohesion were strongly associated with increased maintenance effort. Conclusion: Apart from size, surrogate maintainability measures may not reflect future maintenance effort. Surrogates need to be evaluated in the contexts for which they will be used. While traditional metrics are used to identify problematic areas in the code, the improvements of the worst areas may, inadvertently, lead to more problems for the entire system. Our results suggest that local improvements should be accompanied by an evaluation at the system level.},
annote = {Maintainability metrics
},
author = {Sj{\o}berg, Dag I.K. and Anda, Bente and Mockus, Audris},
booktitle = {Proceedings of the ACM-IEEE international symposium on Empirical software engineering and measurement - ESEM '12},
doi = {10.1145/2372251.2372269},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sj{\o}berg, Anda, Mockus - 2012 - Questioning software maintenance metrics.pdf:pdf},
isbn = {9781450310567},
issn = {19493770},
keywords = {D2 SOFTWARE ENGINEERING General Terms Measurement,Experimentation Keywords Software maintenance,software metrics},
pages = {107},
title = {{Questioning software maintenance metrics}},
url = {https://www.researchgate.net/publication/261075392 http://dl.acm.org/citation.cfm?doid=2372251.2372269},
year = {2012}
}
@inproceedings{Smeds2015,
abstract = {Additive manufacturing is shifting business models towards mass customisation and responsible production paradigms. Such a technology is fostering re-localisation and value-added approaches in order to increase customer involvement into a more flexible and sustainable production process. This paper provides both theoretical tools and case studies to frame the additive manufacturing realm and the distributed fabrication background.},
author = {Smeds, Riitta and Lavikka, Rita and Jaatinen, Miia and Hirvensalo, Antero},
booktitle = {Proceedings of the International Conference on Advances in Product Management Systems},
doi = {10.1007/978-3-319-22759-7_2},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/Smeds et al.{\_}{\_}APMS{\_}2015.pdf:pdf},
isbn = {9783319227580},
issn = {18684238},
keywords = {Business ecosystems,Change,Co-creation,Coordination,Intervention,Process},
pages = {11--18},
publisher = {Springer},
title = {{Interventions for the co-creation of inter-organizational business process change}},
year = {2015}
}
@article{Smit2013,
abstract = {As utility computing is widely deployed, organizations and researchers are turning to the next generation of cloud systems: federating public clouds, integrating private and public clouds, and merging resources at all levels (IaaS, PaaS, SaaS). Adaptive systems can help address the challenge of managing this heterogeneous collection of resources. While services and libraries exist for basic management tasks that enable implementing decisions made by the manager, monitoring is an open challenge. We define a set of requirements for aggregating monitoring data from a heterogeneous collections of resources, sufficient to support adaptive systems. We present and implement an architecture using stream processing to provide near-realtime, cross-boundary, distributed, scalable, fault-tolerant monitoring. A case study illustrates the value of collecting and aggregating metrics from disparate sources. A set of experiments shows the feasibility of our prototype with regard to latency, overhead, and cost effectiveness. {\textcopyright} 2012 Elsevier B.V. All rights reserved.},
annote = {},
author = {Smit, Michael and Simmons, Bradley and Litoiu, Marin},
doi = {10.1016/j.future.2013.01.009},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Smit, Simmons, Litoiu - Unknown - Distributed, Application-level Monitoring for Heterogeneous Clouds using Stream Processing.pdf:pdf},
isbn = {0167739X (ISSN)},
issn = {0167739X},
journal = {Future Generation Computer Systems},
keywords = {Cloud computing,Distributed,Monitoring,Monitoring-as-a-Service,Utility computing},
number = {8},
pages = {2103--2114},
title = {{Distributed, application-level monitoring for heterogeneous clouds using stream processing}},
url = {http://ganglia.sourceforge.net/},
volume = {29},
year = {2013}
}
@article{Solomon2001,
abstract = {Web-based surveying is becoming widely used in social science and educational research. The Web offers significant advantages over more traditional survey techniques however there are still serious methodological challenges with using this approach. Currently coverage bias or the fact significant numbers of people do not have access, or choose not to use the Internet is of most concern to researchers. Survey researchers also have much to learn concerning the most effective ways to conduct surveys over the Internet. While in its early stages, research on Internet-based survey methodology has identified a number of factors that influence data quality. Of note, several studies have found Internet surveys have significantly lower response rates than comparable mailed surveys. Several factors have been found to increase response rates including personalized email cover letters, follow-up reminders, pre-notification of the intent to survey and simpler formats. A variety of software tools are now available for conducting Internet surveys and they are becoming a increasing sophisticated and easy to use. While there is a need for caution, the use of Web-based surveying is clearly going to grow.},
annote = {Conducting surveys stuff, probably good. Fukken old tho

},
author = {Solomon, David J and Ph, D},
doi = {Doi 10.1115/1.2162589},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Solomon - Unknown - Conducting Web-Based Surveys.pdf:pdf},
isbn = {1087-1357},
issn = {15317714},
journal = {Practical Assessment; Research {\&} Evaluation},
pages = {1--5},
title = {{Conducting Web-Based Surveys}},
url = {http://cogprints.org/2357/1/Web{\_}Survey{\_}Article.pdf},
year = {2001}
}
@incollection{Sommerville2011,
author = {Sommerville, Ian},
booktitle = {Software Engineering},
chapter = {9},
edition = {9th},
file = {:home/markus/Documents/Koulu/Tietotekniikka/Ohjelmointi/Software Engineering/Sommerville - Software Engineering 9ed.pdf:pdf},
pages = {234--260},
publisher = {Addison-Wesley},
title = {{Software Evolution}},
year = {2011}
}
@inproceedings{Spohrer2013,
abstract = {Software developers increasingly rely on the four-eyes principle to ensure high quality early on in the development process. Implementing this principle, peer code review has recently been proposed as a less costly alternative to the more commonly used pair programming technique. This study examines the implications of these techniques on knowledge creation within information systems development teams. Thereby, it contrasts with prior research on pair programming and peer code review which has primarily focused on comparing direct quality gains to increased costs. Based on a multiple-case study and guided by Nonaka's theory on organizational knowledge cre- ation, this study improves our understanding of the varying effects of pair programming and peer code review, both on an individual and on a team level. Findings show that the techniques may be substitutes on a dyadic level, but may complement each other regarding their effects on team-level knowledge creation: if applied simultaneously, they may collectively enable socialization, external- ization, combination, and internalization of knowledge. This study contributes not only to literature on development techniques by explaining the complementary nature of pair programming and peer code review, but also extends current literature by analyzing how development teams come to benefit from knowledge of their single members in daily work with these techniques.},
annote = {Peer reviews vs. pair programming},
archivePrefix = {arXiv},
arxivId = {1805.05345},
author = {Spohrer, Kai and Kude, Thomas and Schmidt, Christoph T and Heinzl, Armin},
booktitle = {Proceedings of the 21st European Conference on Information Systems},
doi = {10.1145/2597073.2597117},
eprint = {1805.05345},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Spohrer et al. - 2013 - Association for Information Systems AIS Electronic Library (AISeL) ECIS 2013 Completed Research ECIS 2013 Procee.pdf:pdf},
isbn = {9781479973675},
issn = {0367-326X (Print)},
keywords = {Pair programming,knowledge creation,peer code review,software development},
pmid = {14630181},
title = {{Knowledge creation in information systems development teams: the role of pair programming and peer code review}},
year = {2013}
}
@inproceedings{Stapel2010,
abstract = {Pair Programming has often been reported to be beneficial in software projects. To better understand where these benefits come from we evaluate the aspect of intra-pair communication. Under the assumption that the benefits stem from the information being exchanged, it is important to analyze the types of information being communicated. Based on the Goal Question Metric method we derive a set of relevant metrics and apply them in an eXtreme Programming class room project. Data covering a total of 22.9 hours of intra-pair communication was collected. We found that only 7{\%} of the conversations were off-topic (e.g. private), 11{\%} about requirements, 14{\%} about design, and 68{\%} about implementation details (e.g. syntax). Accordingly, a great share of the information being exchanged in Pair Programming is on a low level of abstraction. These results represent a first data point on what kind of information is communicated to what extent during Pair Programming.},
address = {Berlin},
annote = {Pair programming communication},
author = {Stapel, Kai and Knauss, Eric and Schneider, Kurt and Becker, Matthias},
booktitle = {Proceedings of the International Conference on Agile Software Development},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Stapel et al. - 2010 - Towards Understanding Communication Structure in Pair Programming.pdf:pdf},
keywords = {Communication,Empirical Study,Pair Programming,communication,empirical study,pair programming},
pages = {117--131},
publisher = {Springer},
title = {{Towards Understanding Communication Structure in Pair Programming}},
year = {2010}
}
@inproceedings{Stettina2013,
abstract = {The growing use of agile and lean methods has heated the discussion on efficiency and sustainability of software engineering processes. During project handovers, for example, loss of knowledge has been indicated and critics of agile methods point at a lack of documentation. In this paper we take the perspective of patterns of human action, looking at the actions the teams take and the artifacts they use during a software project handover. Our results from 30 teams in small to large size projects cover the perceptions of a variety of roles and indicate that the adoption is a learning process in three interdependent phases: Environment, System and Architecture. The participants in our study perceived the biggest gaps in the usefulness of available design and requirements documentation. Based on our findings we suggest that documentation artifacts should rather support the learning process and that including maintenance staff in the development process significantly helps improving the handover.},
annote = {Project handover stuff in agile context, could be relevant},
author = {Stettina, Christoph Johann and Kroon, Egbert},
booktitle = {Proceedings of the International Conference on Engineering, Technology and Innovation {\&} IEEE International Technology Management Conference},
doi = {10.1109/ITMC.2013.7352703},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Stettina, Kroon - 2015 - Is there an agile handover An empirical study of documentation and project handover practices across agile soft.pdf:pdf},
isbn = {9781467373838},
keywords = {Agile project management,agile teams,empirical study,knowledge sharing,organizational management and coordination,process improvement,software development},
pages = {1--12},
publisher = {IEEE},
title = {{Is there an agile handover? An empirical study of documentation and project handover practices across agile software teams}},
year = {2013}
}
@inproceedings{Sulayman2009,
abstract = {It is observed that in recent years small and medium Web companies have emerged very rapidly and thousands of such companies are in existence all over the globe. To cater the needs of such companies, a new field of research was created – Web Engineering, given than Web engineering differs from traditional software engineering in numerous ways, which include the need of agile process models, extended modelling techniques (WebML), Navigational development techniques, different architectures and rapid application process along with different testing techniques. [12] [13] [15] [16 [25] [27]]. It has been observed that Software process improvement emerges as one of the biggest challenges for such companies [12]. A systematic literature review (SLR) has been conducted to identify and discuss the existing models and techniques used by small and medium Web companies. Important phases of our SLR included identification of the research questions to be investigated; primary and secondary database searches to identify relevant literature; data extraction from selected studies; data synthesis to formulate answers; and formal discussion to identify trends and research gaps. A total number of 88 studies were selected, after being filtered using an initial inclusion and exclusion criteria. Surprisingly, further inspection revealed only 4 relevant studies on the topic. A careful evaluation of studies was performed using qualitative as well as quantitative checklists; extracted data were further synthesized to answer the probed research questions. The identification of research gaps and possibilities of further research were explored.},
address = {Berlin},
author = {Sulayman, Muhammad and Mendes, Emilia},
booktitle = {Proceedings of the International Conference on Advanced Software Engineering and Its Applications},
doi = {10.1007/978-3-642-10619-4_1},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sulayman, Mendes - Unknown - A Systematic Literature Review of Software Process Improvement in Small and Medium Web Companies(2).pdf:pdf},
isbn = {3642106188},
issn = {18650929},
keywords = {Small and medium Web companies,Software Process Improvement,Systematic Literature Review},
pages = {1--8},
publisher = {Springer},
title = {{A systematic literature review of software process improvement in small and medium web companies}},
year = {2009}
}
@phdthesis{Sun2009,
abstract = {To advance the nomological net and theory, this dissertation proposed a comprehensive pair programming research model where the relationships among system complexity, programming methods, pair composition, effort, duration, defect rate, knowledge transfer, and various cost constructs were investigated. A multi-method, multi-study empirical approach was adopted. The survey method was employed for Study 1, and the bootstrap simulation method for Study 2. The responses from 191 industry software developers and the simulation results suggest the previous conclusions regarding pair programming are limited in nature and the pair programming approach may not be as desirable in all situations as was previously assumed. The pair programming approach clearly adds value in situations where it is appropriate but certain conditions must be met for this goal to be achieved. Pair composition must be taken into account, and it is important to examine the interactions of multiple cost factors such as defect, effort, duration, and knowledge transfer and consider their combined effect on the ultimate goal of the project.},
annote = {Good stuff about pair programming},
author = {Sun, Wenying},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sun, Marakas - 2009 - The True Cost of Pair Programming Development of a Comprehensive Model and Test.pdf:pdf},
isbn = {978-1-124-93733-5},
school = {University of Kansas},
title = {{The True Cost of Pair Programming: Development of a Comprehensive Model and Test}},
year = {2011}
}
@article{Tang2010,
abstract = {Recent research suggests that architectural knowledge, such as design decisions, is important and should be recorded alongside the architecture description. Different approaches have emerged to support such architectural knowledge (AK) management activities. However, there are different notions of and emphasis on what and how architectural activities should be supported. This is reflected in the design and implementation of existing AK tools. To understand the current status of software architecture knowledge engineering and future research trends, this paper compares five architectural knowledge management tools and the support they provide in the architecture life-cycle. The comparison is based on an evaluation framework defined by a set of 10 criteria. The results of the comparison provide insights into the current focus of architectural knowledge management support, their advantages, deficiencies, and conformance to the current architectural description standard. Based on the outcome of this comparison a research agenda is proposed for future work on AK tools. {\textcopyright} 2009 Elsevier Inc. All rights reserved.},
annote = {Architecture knowledge tools.

.},
author = {Tang, Antony and Avgeriou, Paris and Jansen, Anton and Capilla, Rafael and {Ali Babar}, Muhammad},
doi = {10.1016/j.jss.2009.08.032},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tang et al. - Unknown - A comparative study of architecture knowledge management tools q.pdf:pdf},
isbn = {0164-1212},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Architectural design,Architectural knowledge management tool,Design rationale},
number = {3},
pages = {352--370},
title = {{A comparative study of architecture knowledge management tools}},
url = {https://ulir.ul.ie/bitstream/handle/10344/2101/2009{\_}Tang.pdf?sequence=2},
volume = {83},
year = {2010}
}
@inproceedings{Tiarks2011,
abstract = {Although the field of program comprehension as a research discipline has evolved considerably over the past years, only little is known about how software engineers perform their work. In this paper, we report on an observational study that we have carried out to investigate how software developers understand code when they approach a given maintenance task. We particularly focused on the developers' activities, tools, information needs and their practices. In the study, we observed seven professional programmers at a large supplier in the automotive domain while performing a real maintenance task within their normal workflow. Afterwards we conducted a semi-structured interview to get a deeper insight into the process of program understanding. The focus of our analysis has been on what kind of activities a programmer performs and how those activities depend on each other. We categorize different kinds of activities based on this analysis, highlight challenges faced by the programmers , and discuss the implications of our results on the maintenance process.},
annote = {Maintenance activities. Ok as an example?},
author = {Tiarks, Rebecca},
booktitle = {Proceedings of the Workshop Software Reengineering},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tiarks - 2011 - What Maintenance Programmers Really Do An Observational Study.pdf:pdf},
pages = {36--37},
title = {{What Maintenance Programmers Really Do: An Observational Study}},
year = {2011}
}
@article{Tourangeau2004,
abstract = {Focuses on developments in survey research methodology and societal change. Methods of telephone sampling; Modes of data collection; Theories of mode effects.},
annote = {General survey stuff, oldish, },
author = {Tourangeau, Roger},
doi = {10.1146/annurev.psych.55.090902.142040},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/53eb6d9e0cf2593ba7087f0d.pdf:pdf},
isbn = {00664308},
issn = {0066-4308},
journal = {Annual Review of Psychology},
number = {1},
pages = {775--801},
pmid = {12005203},
title = {{Survey Research and Societal Change}},
url = {https://www.researchgate.net/profile/Roger{\_}Tourangeau/publication/8902782{\_}Survey{\_}Research{\_}and{\_}Societal{\_}Change/links/53eb6d9e0cf2593ba7087f0d.pdf http://www.annualreviews.org/doi/10.1146/annurev.psych.55.090902.142040},
volume = {55},
year = {2004}
}
@article{Trindade2011,
abstract = {This paper analyses and evaluates the knowledge creation and sharing experiences of teams in the Agile software development domain. Over a series of three empirical phases a method is developed to evaluate the advantages and limitations of Agile practices in knowledge creation and sharing for Agile teams. In the first phase, initial issues and characteristics concerning agile methodologies were collected with a scoping review of the period since the manifesto for Agile software development emerged. The second phase represents a hermeneutic analysis of the result set obtained in the first phase. Using a SWOT analysis, the third phase assesses Agile processes, their relationships with knowledge transfer management and their effects on the productivity of software development teams. This research offers some key insights for decision makers considering the adoption of Agile methodologies in software development activities.},
annote = {Melko lailla , ei uutta tietoa},
author = {Trindade, F{\'{a}}tima and Rosa, Valdemar Nunes and Correia, Ana Maria Ramalho and Neto, Miguel de Castro},
doi = {10.1016/j.jss.2012.02.033},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Trindade et al. - 2011 - Knowledge creation and sharing in software development teams using Agile methodologies key insights affecting t.pdf:pdf},
isbn = {978-989-96247-4-0},
issn = {2166-0727},
journal = {Information Systems and Technologies (CISTI)},
keywords = {- agile methodologies,knowledge,knowledge sharing,software development teams},
number = {15-18 June 2011},
pages = {307--312},
pmid = {63281116},
title = {{Knowledge creation and sharing in software development teams using Agile methodologies: key insights affecting their adoption}},
url = {https://www.researchgate.net/publication/261468570 http://agilemanifesto.org/.{\%}0Ahttp://search.ebscohost.com/login.aspx?direct=true{\&}db=iih{\&}AN=63281116{\&}lang=es{\&}site=ehost-live{\%}5Cnhttp://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=5974178},
volume = {85},
year = {2011}
}
@article{Tsoukas2009,
abstract = {Despite several insightful empirical studies on how new knowledge is created in organizations, there is still no satisfactory answer to the question, how is new knowledge created in organizations? The purpose of this paper is to address this question by focusing on direct social interaction, adopting a dialogical approach. The following argument is advanced. From a dialogical perspective, new knowledge in organizations originates in the individual ability to draw new distinctions concerning a task at hand. New distinctions may be developed because practitioners experience their situations in terms of already constituted distinctions, which lend themselves to further articulation. Further articulation develops when organizational members engage in dialogical exchanges. When productive, dialogue leads to self-distanciation, namely, to individuals taking distance from their customary and unreflective ways of acting as practitioners. Dialogue is productive depending on the extent to which participants engage relationally with one another. When this happens, participants are more likely to actively take responsibility for both the joint tasks in which they are involved and for the relationships they have with others. Self-distanciation leads to new distinctions through three processes of conceptual change (conceptual combination, conceptual expansion, and conceptual reframing), which, when intersubjectively accepted, constitute new knowledge. Several organizational examples, as well as findings from organizational knowledge research, are reinterpreted to illustrate the above points.},
archivePrefix = {arXiv},
arxivId = {NIHMS150003},
author = {Tsoukas, Haridimos},
doi = {10.1287/orsc.1090.0435},
eprint = {NIHMS150003},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tsoukas - 2009 - A Dialogical Approach to the Creation of New Knowledge in Organizations.pdf:pdf},
isbn = {1047-7039},
issn = {1047-7039},
journal = {Organization Science},
number = {6},
pages = {941--957},
pmid = {47127660},
title = {{A Dialogical Approach to the Creation of New Knowledge in Organizations}},
volume = {20},
year = {2009}
}
@article{Uddin2017,
abstract = {{\textcopyright} 2016 Springer Science+Business Media DordrechtDaily large number of bug reports are received in large open and close source bug tracking systems. Dealing with these reports manually utilizes time and resources which leads to delaying the resolution of important bugs. As an important process in software maintenance, bug triaging process carefully analyze these bug reports to determine, for example, whether the bugs are duplicate or unique, important or unimportant, and who will resolve them. Assigning bug reports based on their priority or importance may play an important role in enhancing the bug triaging process. The accurate and timely prioritization and hence resolution of these bug reports not only improves the quality of software maintenance task but also provides the basis to keep particular software alive. In the past decade, various studies have been conducted to prioritize bug reports using data mining techniques like classification, information retrieval and clustering that can overcome incorrect prioritization. Due to their popularity and importance, we survey the automated bug prioritization processes in a systematic way. In particular, this paper gives a small theoretical study for bug reports to motivate the necessity for work on bug prioritization. The existing work on bug prioritization and some possible problems in working with bug prioritization are summarized.},
annote = {},
author = {Uddin, Jamal and Ghazali, Rozaida and Deris, Mustafa Mat and Naseem, Rashid and Shah, Habib},
doi = {10.1007/s10462-016-9478-6},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Uddin et al. - Unknown - A survey on bug prioritization metaheuristic View project Thermal Transfer Value Prediction for Green Technolog.pdf:pdf},
issn = {15737462},
journal = {Artificial Intelligence Review},
keywords = {Bug prioritization,Bug report,Bug triaging,Classification,Clustering,Survey},
number = {2},
pages = {145--180},
title = {{A survey on bug prioritization}},
url = {https://www.researchgate.net/publication/301644912},
volume = {47},
year = {2017}
}
@article{Vahaniitty2010,
abstract = {The concept of managing new product development projects as an explicit portfolio originates from the context of large organizations. However, the question as to whether explicit portfolio management is relevant for small organizations is rarely discussed. We conducted a qualitative multiple-case study of six small organizations (with 15–40 people) that developed software and provided related services. Five of the organizations did not practice explicit portfolio management. They also seemed to suffer from problems that, in the literature, are considered symptomatic of inadequate portfolio management, such as having too many simultaneous projects, overcommitment in terms of workload, and ineffective executive decision making. In one of the studied organizations, the management personnel had recognized the need for explicit portfolio management and introduced portfolio management practices such as regular reviews of the project portfolio, appointing specific people for resolving cross-project conflicts, and limiting the number of concurrent projects to which a person can be assigned. The personnel we interviewed perceived clear improvements with respect to various challenges since the introduction of these practices. Our preliminary study suggests that explicit portfolio management is relevant for small software organizations, at least in cases in which the development personnel possess multiple roles and responsibilities and are concurrently performing many different types of activities.},
annote = {Draft paper! Maybe an interesting point of view for QOCO, but not specifically related to maintenance.

},
author = {V{\"{a}}h{\"{a}}niitty, Jarno. and Rautiainen, Kristian and Lassenius, Casper},
doi = {10.1147/JRD.2009.2038747},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Vahaniitty, Rautiainen, Lassenius - 2010 - Small software organizations need explicit project portfolio management.pdf:pdf},
isbn = {00188646},
issn = {0018-8646},
journal = {IBM Journal of Research and Development},
number = {2},
pages = {1:1--1:12},
title = {{Small software organizations need explicit project portfolio management}},
volume = {54},
year = {2010}
}
@article{VanGompel2016,
abstract = {CLARIAH aims to deliver a digital research infrastructure made explicitly accessible for re- searchers from the social sciences and humanities (SSH). This makes the development of advanced ICT tools a core activity within CLARIAH. To be able to assess the quality of the research infrastructure as a whole, we need to be able to assess the quality of its individual software parts, and their function inside of the research infrastructure including data compo- nents. If we can establish a common set of software guidelines, we may more readily identify weaker components of the software infrastructure and work on their improvement. We may also be able to better direct software production processes towards issues of interoperability and sustainability. A digital research infrastructure operates at the intersection of supporting ICT and research practices. For the SSH those are far from being homogeneous. The practices served by the infrastructure differ concerning the object of analysis, the processes of analysis, and the required usability level. The need for increased attention to software quality and sustainability in an academic context is stressed by Doorn et al. [2016]. They recognize the fundamental role software plays in modern research and observe that good development practice is less followed in academia than in the commercial sector, which leads to problems in maintenance and adoption. They thus set out to promote good software development practice, good models of sustainability and dissemination of the best software across application areas/disciplines. We fully agree with these goals, and the guidelines presented here are intended to respond, on a practical level, to these with specific software quality criteria, explicitly encompassing sustainability as well.},
author = {van Gompel, Maarten and Noordzij, Jauco and Valk, Reinier De and Scharnhorst, Andrea},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Van Gompel, Noordzij - 2016 - Guidelines for Software Quality.pdf:pdf},
journal = {CLARIAH Task},
title = {{Guidelines for Software Quality version 1.1}},
volume = {54},
year = {2016}
}
@article{VonWangenheim2010,
abstract = {Software process improvement and assessment guided by a maturity level or a process capability profile based on a capability/maturity model is now well established in practice as a successful means for improving software intensive organizations. Therefore, a wide range of software process capability/maturity models have been developed evolved and adapted over the past years. In this paper, we present the results of a systematic literature review on this type of models. Our results show that there exist a large variety of models with a trend to the specialization of those models for specific domains. We also identified that most of those models are concentrated around the CMM/CMMI framework and the standard ISO/IEC 15504 (SPICE).},
annote = {CMM/CMMI processes evaluated
},
author = {von Wangenheim, C. G. and Hauck, J. C. R. and Salviano, Clenio F and von Wangenheim, A.},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/von Wangenheim et al. - 2010 - Systematic literature review of software process capabilitymaturity models.pdf:pdf},
isbn = {978-1-119-12248-7},
journal = {International Conference on Software Process. Improvement And Capability dEtermination (SPICE)},
number = {May},
pages = {1--9},
title = {{Systematic literature review of software process capability/maturity models}},
url = {http://itsqc.cmu.edu/models/escm-cl/index.asp http://www.inf.ufsc.br/{~}gresse/download/SPICE2010{\_}Systematic{\_}Literature{\_}vf.pdf},
year = {2010}
}
@article{Vreede2009,
abstract = {Collaboration is a critical phenomenon in organizational life. Collaboration is necessary yet many organizations struggle to make it work. The field of IS has devoted much effort to understanding how technologies can improve the productivity of collaborative work. Over the past decade, the field of Collaboration Engineering has emerged as a focal point for research on designing and deploying collaboration processes that are recurring in nature and that are executed by practitioners in organizations rather than collaboration professionals. In Collaboration Engineering, researchers do not study a collaboration technology in isolation. Rather, they study collaborative work practices that can be supported on different technological platforms. In this editorial, we discuss the field of Collaboration Engineering in terms of its foundations, its approach to designing and deploying collaboration processes, and its modeling techniques. We conclude with a Collaboration Engineering research agenda for the coming decade.},
annote = {General collaboration engineering stuff

Quite heavya },
author = {Vreede, Gert-Jan and Briggs, Robert and Massey, Anne},
doi = {10.17705/1jais.00191},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Vreede, Briggs, Massey - 2009 - Collaboration Engineering Foundations and Opportunities Editorial to the Special Issue on the Journal of.pdf:pdf},
isbn = {15369323},
issn = {15369323},
journal = {Journal of the Association for Information Systems},
number = {3},
pages = {121--137},
title = {{Collaboration Engineering: Foundations and Opportunities}},
url = {https://www.researchgate.net/publication/220580590 https://aisel.aisnet.org/jais/vol10/iss3/7/},
volume = {10},
year = {2009}
}
@book{GaryWalker2001,
abstract = {The complete "best practices" guide to IT problem resolution! No matter how professional your IT organization, if you can't resolve problems quickly and effectively, you'll lose your stakeholders' confidence-and fail. Nowadays, help desk s aren't enough: companies want true service centers capable of delivering complex, strategic solutions. IT Problem Management is the first single source for building world-class problem management processes. Drawing upon his extensive consulting experience, Gary Walker presents specific improvements you can make to achieve breakthrough results in any help desk or service center-in-house or out-sourced. Coverage includes: Problem identification, customer validation, problem lo gging, service delivery, knowledge capture and sharing, and management oversight The Immediate Response Model: accounting for problem variability, complexity, and volume Detailed metrics for measuring your responsiveness Better ways to create and use service level agreements State-of-the-art tools for customer interaction, service delivery, and proactive monitoring New Internet and knowledge base systems: empowering users to solve their own problems The human side: staffing, retention, and motivation IT Problem Management isn't just theory: it delivers real-world case studies, detailed benchmarks, and practical solutions for turning your help desk into a high-performance I T service center, starting today.},
annote = {3-tier support stuff},
author = {Walker, Gary},
edition = {1.},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gary Walker - 2001 - IT Problem Management.pdf:pdf},
isbn = {013030770X},
pages = {256},
publisher = {Prentice Hall PTR},
title = {{IT Problem Management}},
year = {2001}
}
@article{Wang2016,
abstract = {Most firms have started to realize the importance of KM in streamlining their operations and processes to improve organizational performance. So in this paper, we try to survey and present a model for measuring success of KM in small- and medium-sized enterprises (SMEs). This study is the first empirical test of an adaption of the Jennex and Olfman (J{\&}O) KM success model considered a better description of KM success due to its strong theoretical grounding to analysis the influences of KM and inter-actions on workers' productivity in Taiwanese SMEs settings. Structural equation modeling techniques are applied to data collected through questionnaires from 277 knowledge workers. All the hypothesized relationships between the variables are significantly supported by the data. The findings served as useful reference points for researchers interested in investigating issues related to the successful implementation of KM, and for practitioners aiming to achieve the benefits of KM in SMEs.},
annote = {Measuring and promoting knowledge sharing in small organizations, good stuff

More focused on km systems tho},
author = {Wang, Mei Hsiang and Yang, Tarng Yao},
doi = {10.1016/j.apmrv.2015.12.003},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wang, Yang - 2015 - Investigating the success of knowledge management An empirical study of small- and medium-sized enterprises.pdf:pdf},
isbn = {1877-0665 (Electronic)$\backslash$r1877-0657 (Linking)},
issn = {10293132},
journal = {Asia Pacific Management Review},
keywords = {IS success model,KM success model,Knowledge management,Small- and medium-sized enterprises (SMEs)},
number = {2},
pages = {79--91},
title = {{Investigating the success of knowledge management: An empirical study of small- and medium-sized enterprises}},
url = {http://dx.doi.org/10.1016/j.apmrv.2015.12.003},
volume = {21},
year = {2016}
}
@article{Wang2012,
abstract = {This study investigates the quantitative relationship between knowledge sharing, innovation and performance. Based on the literature review, we develop a research model positing that knowledge sharing not only have positive relationship with performance directly but also influence innovation which in turn contributes to firm performance. This model is empirically tested using data collected from 89 high technology firms in Jiangsu Province of China. It is found that both explicit and tacit knowledge sharing practices facilitate innovation and performance. Explicit knowledge sharing has more significant effects on innovation speed and financial performance while tacit knowledge sharing has more significant effects on innovation quality and operational performance. {\textcopyright} 2012 Elsevier Ltd. All rights reserved.},
annote = {Knowledge sharing has positive effect on performance},
author = {Wang, Zhining and Wang, Nianxin},
doi = {10.1016/j.eswa.2012.02.017},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wang, Wang - 2012 - Knowledge sharing, innovation and firm performance.pdf:pdf},
isbn = {0957-4174},
issn = {09574174},
journal = {Expert Systems with Applications},
keywords = {Firm performance,Innovation,Knowledge sharing},
number = {10},
pages = {8899--8908},
pmid = {1512572520},
title = {{Knowledge sharing, innovation and firm performance}},
volume = {39},
year = {2012}
}
@article{Wecker2012,
abstract = {The objective of this study was to test whether information presented on slides during presentations is retained at the expense of information presented only orally.; to investigate part of the conditions under which this effect occurs.; how it can be avoided. Such an effect could be expected and explained either as a kind of redundancy effect due to excessive cognitive load caused by simultaneous presentation of oral and written information, or as a consequence of dysfunctional allocation of attention at the expense of oral information occurring in learners with a high subjective importance of slides. The hypothesized effect and these potential explanations were tested in an experimental study. In courses about literature search and access, 209 university students received a presentation accompanied either by no slides or by regular or concise PowerPoint slides. The retention of information presented orally and of information presented orally and on slides was measured separately in each condition and standardized for comparability. Cognitive load and subjective importance of slides were also measured. The results indicate a "speech suppression effect" of regular slides at the expense of oral information (within and across conditions), which cannot be explained by cognitive overload but rather by dysfunctional allocation of attention.; can be avoided by concise slides. It is concluded that theoretical approaches should account for the allocation of attention below the threshold of cognitive overload and its role for learning.; that a culture of presentations with concise slides should be established. {\textcopyright} 2012 Elsevier Ltd. All rights reserved.},
author = {Wecker, Christof},
doi = {10.1016/j.compedu.2012.01.013},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wecker - 2012 - Slide presentations as speech suppressors When and why learners miss oral information.pdf:pdf},
isbn = {03601315},
issn = {03601315},
journal = {Computers {\&} Education},
keywords = {Improving classroom teaching,Media in education,Post-secondary education,Teaching/learning strategies},
number = {2},
pages = {260--273},
title = {{Slide presentations as speech suppressors: When and why learners miss oral information}},
volume = {59},
year = {2012}
}
@incollection{Wegner1987,
abstract = {The most influential theory of group behavior that has ever been developed is currently in disfavor. This is the theory of the group mind. Social commentators once found it very useful to analyze the behavior of groups by the same expedient used in analyzing the behavior of individuals. The group, like the person, was assumed to be sentient, to have a form of mental activity that guides action. Rousseau (1767) and Hegel (1807) were the early architects of this form of analysis, and it became so widely used in the 19th and early 20th centuries that almost every early social theorist we now recognize as a contributor to modern social psychology held a similar view. McDougall, Ross, Durkheim, Wundt, and LeBon, to name just a few, were willing to assume that the group has a mental life that plays a part in the patterning of group behavior.},
address = {New York},
annote = {TMS},
author = {Wegner, Daniel M},
booktitle = {Theories of Group Behavior},
doi = {10.1007/978-1-4612-4634-3_9},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wegner - 2011 - Transactive Memory A Contemporary Analysis of the Group Mind.pdf:pdf},
pages = {185--208},
publisher = {Springer},
title = {{Transactive Memory: A Contemporary Analysis of the Group Mind}},
year = {1987}
}
@inproceedings{White2012,
abstract = {Software interoperability is a pressing need to allow governments and businesses to function efficiently. The most commonly recommended technology for interoperability is Services Oriented Architecture (SOA) implemented using web services. Several authors have argued that SOA systems may be particularly challenging to maintain, largely due to difficulties in program comprehension. Program comprehension for SOA could be aided by appropriate software tools to provide information to SOA maintainers. However, there is little experience regarding the questions that SOA maintainers will need to ask. This paper describes use of a prototype SOA search tool in an informal requirements elicitation study to gather feedback from practicing programmers about what SOA maintainers will want to know. Several specific information needs were identified, including the need for a compact way of representing data types used in services, and the need for ontology support to help understand the many different elements and attributes in web services descriptions.},
annote = {Review on SOA maintenance, could be interesting.

Public sector perspective. },
author = {White, Laura and Wilde, Norman and Reichherzer, Thomas and El-Sheikh, Eman and Goehring, George and Baskin, Arthur and Hartmann, Ben and Manea, Mircea},
booktitle = {Proceedings of the Annual Hawaii International Conference on System Sciences},
doi = {10.1109/HICSS.2012.614},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/White et al. - 2012 - Understanding interoperable systems Challenges for the maintenance of SOA applications.pdf:pdf},
isbn = {9780769545257},
issn = {15301605},
pages = {2199--2206},
publisher = {IEEE},
title = {{Understanding interoperable systems: Challenges for the maintenance of SOA applications}},
url = {https://www.computer.org/csdl/proceedings/hicss/2012/4525/00/4525c199.pdf},
year = {2012}
}
@incollection{Williams2010,
abstract = {Pair programming is a style of programming in which two programmers work side-by-side at one computer, continuously collaborating on the same design, algorithm, code, or test. In industry, the practice of pair programming has been shown to improve product quality, improve team spirit, aid in knowledge management, and reduce product risk. In education, pair programming also improves student morale, helps students to be more successful, and improves student retention in an information technology major. This chapter provides an overview and history of pair programming followed by a summary of the use of pair programming in industry and academia. The chapter also provides insight into the principles that make pair programming successful, the economics of pair programming, and the challenges in the adoption of pair programming.},
annote = {Benefits of pair programming
Good basic article},
author = {Williams, Laurie},
booktitle = {Encyclopedia of Software Engineering},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Williams - Unknown - Pair Programming.pdf:pdf},
keywords = {collaborative programming,pair programming,software inspection},
publisher = {Wiley},
title = {{Pair Programming}},
volume = {2},
year = {2010}
}
@article{Wray2010,
abstract = {Pair programming has generated considerable controversy: some developers are enthusiastic about it, almost evangelical; others are dubious, even hostile. However, a large factor in this controversy is that programmers label a wide variety of practices under the "pair programming" umbrella. Thus, before our community can sensibly discuss how pair programming works, we first need to establish exactly what it is.},
annote = {Definition of pair programming},
author = {Wray, Stuart},
doi = {10.1109/MS.2009.199},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wray - 2010 - How pair programming really works.pdf:pdf},
isbn = {0740-7459},
issn = {07407459},
journal = {IEEE Software},
keywords = {Agile development,Programming teams,Software process,Software psychology},
number = {1},
pages = {50--55},
title = {{How pair programming really works}},
volume = {27},
year = {2010}
}
@article{Yin2003,
annote = {Case study definition},
author = {Yin, Robert K.},
journal = {Applied social research methods series},
publisher = {Sage Publications Inc.},
title = {{Case study research design and methods third edition}},
volume = {5},
year = {2003}
}
@article{Zhang1999,
annote = {Find other reference information, quite general and old stuff

},
author = {Zhang, Yin},
doi = {10.5153/sro.73},
file = {:home/markus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Zhang - 1997 - Using the internet for survey research.pdf:pdf},
isbn = {9780642961976},
issn = {13607804},
journal = {Journal of the American Society for Information Science},
number = {1},
pages = {57--68},
title = {{Using the internet for survey research: A Case Study}},
url = {https://pdfs.semanticscholar.org/a3c0/744d3b869fb2dde7f8a6f7ba8a84c8edb54f.pdf},
volume = {51},
year = {1999}
}
@inproceedings{Zieris2014,
abstract = {Context: General knowledge transfer is often considered a valuable effect or side-effect of pair programming, but even more important is its role for the success of the pair programming session itself: The partners often need to explain an idea to carry the process forward. Goal: Understand the mechanisms at work when knowledge is transferred during a pair programming session; provide practical advice for constructive behavior. Method: Qualitative data analysis of recordings of actual industrial pair programming sessions. Results: Some pairs are much more efficient in their knowledge transfer than others. These pairs manage to (1) not attempt to explain multiple things at once, (2) not lose sight of a topic, (3) clarify difficult points in stages. Conclusions: Pair programming requires skill beyond software development skill. To be able to identify knowledge needs and then push such knowledge to or pull it from the partner successfully is one aspect of such skill. We characterize a number of its elements.},
annote = {Pair programming knowledge transfer},
author = {Zieris, Franz and Prechelt, Lutz},
booktitle = {Proceedings of the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement - ESEM '14},
doi = {10.1145/2652524.2652529},
file = {:home/markus/Documents/Koulu/Info/Dippa/L{\"{a}}hteet/zieris2014.pdf:pdf},
isbn = {9781450327749},
issn = {19493789},
pages = {1--10},
publisher = {ACM},
title = {{On knowledge transfer skill in pair programming}},
year = {2014}
}
